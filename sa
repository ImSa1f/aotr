getgenv().AOTREVOLUTION =1 true
if game.GameId == 4658598196 and getgenv().AOTREVOLUTION == true then

    if not game:IsLoaded() then
        game.Loaded:Wait()
    end

    while not cloneref(game:GetService("Workspace")) do
        task.wait()
    end

    local player = game.Players.LocalPlayer

    while not player do task.wait()
        player = game.Players.LocalPlayer
    end

    local character = player.Character or player.CharacterAdded:Wait()

    while not character do task.wait()
        character = player.Character
    end

    local hrp = character:FindFirstChild("HumanoidRootPart")

    while not hrp do task.wait()
        hrp = character:FindFirstChild("HumanoidRootPart")
    end

    local humanoid = character:FindFirstChildOfClass("Humanoid")

    while not humanoid do task.wait()
        humanoid = character:FindFirstChildOfClass("Humanoid")
    end

    local vim = cloneref(game:GetService("VirtualInputManager"))
    while not vim do task.wait()
        vim = cloneref(game:GetService("VirtualInputManager"))
    end

    local workspace = cloneref(game:GetService("Workspace"))
    local game = game

    players = cloneref(game:GetService("Players"))
    player = players.LocalPlayer
    character = player.Character or player.CharacterAdded:Wait()
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")
    humanoid = character:FindFirstChildOfClass("Humanoid")

    player.CharacterAdded:Connect(function(newCharacter)
        character = newCharacter
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoid = character:FindFirstChildOfClass("Humanoid")
    end)

    if game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
        while player.PlayerGui:FindFirstChild("Loader") do
            task.wait()
        end
        if not player.PlayerGui:FindFirstChild("Loader") then
            task.wait(1)
        end
    end

    local camera = workspace.Camera
    local screenWidth = camera.ViewportSize.X
    local screenHeight = camera.ViewportSize.Y

    local yOffsetValues = {100, 90, 80, 70, 60, 50, 40, 30, 20, 10, 0}

    local GuiService = cloneref(game:GetService("GuiService"))

    local function press(btn)
        local inset = GuiService:GetGuiInset()
        local aPos, aSize = btn.AbsolutePosition, btn.AbsoluteSize
        vim:SendMouseButtonEvent(inset.X + aPos.X + aSize.X / 2, inset.Y + aPos.Y + aSize.Y / 2, 0, true, nil, 1)
        vim:SendMouseButtonEvent(inset.X + aPos.X + aSize.X / 2, inset.Y + aPos.Y + aSize.Y / 2, 0, false, nil, 1)
    end

    local function realClick(instance)
        if instance and instance.Selectable and instance.Visible == true then
            GuiService.SelectedObject = instance
            task.wait()
            vim:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
            vim:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
            task.wait()
            GuiService.SelectedObject = nil
        end
    end

    local function clickButton(buttton, yOffset)
        vim:SendMouseButtonEvent(buttton.AbsolutePosition.X + buttton.AbsoluteSize.X / 2, buttton.AbsolutePosition.Y + yOffset, 0, true, buttton, 0)
        vim:SendMouseButtonEvent(buttton.AbsolutePosition.X + buttton.AbsoluteSize.X / 2, buttton.AbsolutePosition.Y + yOffset, 0, false, buttton, 0)
    end

    local function stringToNumber(str)
        local result = 0
        local decimalFound = false
        local decimalDivisor = 1

        for i = 1, #str do
            local char = string.sub(str, i, i)
            if char == '.' then
                decimalFound = true
            elseif char >= '0' and char <= '9' then
                if decimalFound then
                    decimalDivisor = decimalDivisor * 10
                    result = result + (char:byte() - 48) / decimalDivisor
                else
                    result = result * 10 + (char:byte() - 48)
                end
            end
        end
        return result
    end

    local executed = false
    local httpService = cloneref(game:GetService("HttpService"))

    local function readData()
        local success, result = pcall(function()
            return httpService:JSONDecode(readfile("data.json"))
        end)
        if success then
            return result
        else
            return {}
        end
    end

    local function writeData(playerName, playerData)
        local success, result = pcall(function()
            local data = readData()
            data[playerName] = playerData
            writefile("data.json", httpService:JSONEncode(data))
        end)
        if not success then warn(result) end
    end

    gemsfound = false

    local function storetotalgoldgemsmissions()
        local success, err = pcall(function()
            local data = readData()
            local playerData = data[player.Name] or {
                placeid = 0,
                total_gold = 0,
                total_gems = 0,
                MissionsCompleted = 0,
                Current_Prestige = 0
            }

            if playerData.placeid ~= game.PlaceId then
                playerData.placeid = game.PlaceId
                playerData.total_gold = 0
                playerData.total_gems = 0
                playerData.MissionsCompleted = 0
            end

            local goldEarned = player.PlayerGui:FindFirstChild("Interface") and player.PlayerGui.Interface:FindFirstChild("Rewards") and player.PlayerGui.Interface.Rewards.Visible and player.PlayerGui.Interface.Rewards.Main.Info.Main.Items.Gold.Main.Inner.Quantity.Text or nil
            if goldEarned then
                gold_text = stringToNumber(goldEarned)
            else
                gold_text = 0
            end

            local current_gold = gold_text
            playerData.total_gold = playerData.total_gold + current_gold

            local gemsEarned = 0
            if player.PlayerGui:FindFirstChild("Interface") and player.PlayerGui.Interface:FindFirstChild("Rewards") and player.PlayerGui.Interface.Rewards.Visible and player.PlayerGui.Interface.Rewards.Main.Info.Main.Items:FindFirstChild("Gems") then
                gemsEarned = player.PlayerGui.Interface.Rewards.Main.Info.Main.Items.Gems.Main.Inner.Quantity.Text
                local gems_text = stringToNumber(gemsEarned)
                local current_gems = gems_text or 0
                playerData.total_gems = playerData.total_gems + current_gems
            end

            if player.PlayerGui:FindFirstChild("Interface") and player.PlayerGui.Interface:FindFirstChild("Rewards") and player.PlayerGui.Interface.Rewards.Visible then
                playerData.MissionsCompleted = (playerData.MissionsCompleted or 0) + 1
            end

            writeData(player.Name, playerData)
        end)
        if not success then warn(err) end
    end

    storetotalgoldgemsmissions()

    if game.PlaceId == 14916516914 then
        local currentprestige
        task.spawn(function()
            local success, err = pcall(function()
                local data = readData()
                local playerData = data[player.Name] or {
                    placeid = 0,
                    total_gold = 0,
                    total_gems = 0,
                    MissionsCompleted = 0,
                    Current_Prestige = 0
                }
                while task.wait(.5) do
                    if player:GetAttribute("Prestige") ~= currentprestige then
                        currentprestige = player:GetAttribute("Prestige")
                        playerData.Current_Prestige = currentprestige
                        writeData(player.Name, playerData)
                    end
                end
            end)
            if not success then warn(err) end
        end)
    end

    --print("a")

    local function preventChange(obj)
        if obj.Parent and obj.Parent.Name == player.Name then
            if obj:IsA("BasePart") then
                obj.CFrame = obj.CFrame
                obj.Position = obj.Position
            end
        end
    end

    local function continuouslyPreventChange()
        while true do task.wait()
            if character then
                for _, descendant in ipairs(character:GetDescendants()) do
                    preventChange(descendant)
                end
            end
        end
    end

    task.spawn(continuouslyPreventChange)

    -- //NORMAL TWEEN\\

    local RunService = cloneref(game:GetService("RunService"))
    local TweenService = cloneref(game:GetService("TweenService"))
    local moveCancelled = false
    local moveInProgress = false

    local function moveTo(character, targetPosition)
        if not character or not targetPosition then return end

        if moveInProgress then
            moveCancelled = true
        end

        moveCancelled = false
        moveInProgress = true

        local rootpart = character:FindFirstChild("HumanoidRootPart")
        if not rootpart then return end

        local startPosition = rootpart.Position
        local direction = (targetPosition - startPosition).Unit
        local distance = (targetPosition - startPosition).Magnitude
        local duration = distance / 300

        local startTime = os.clock()
        local endTime = startTime + duration

        while os.clock() < endTime and not moveCancelled do 
            task.wait()

            local currentTime = os.clock()
            local timeRatio = (currentTime - startTime) / duration
            local currentPosition = startPosition + direction * (distance * timeRatio)

            rootpart.CFrame = CFrame.new(currentPosition)
            TweenService:Create(game.Workspace.CurrentCamera, TweenInfo.new(0.1), {CFrame = CFrame.new(currentPosition, targetPosition)}):Play()
        end

        if not moveCancelled then
            rootpart.CFrame = CFrame.new(targetPosition)
        end

        moveInProgress = false
    end

    -- //FAST TWEEN\\

    local function fastmoveto(character, targetPosition)
        if not character or not targetPosition then return end

        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if not rootPart then return end

        local startPosition = rootPart.Position
        local direction = (targetPosition - startPosition).Unit
        local distance = (targetPosition - startPosition).Magnitude

        if startPosition.Y < targetPosition.Y then
            startPosition = Vector3.new(startPosition.X, targetPosition.Y, startPosition.Z)
        end

        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.Velocity = direction * 2000
        bodyVelocity.MaxForce = Vector3.new(10000, 10000, 10000)
        bodyVelocity.Parent = rootPart

        local tweenInfo = TweenInfo.new(distance / 2000, Enum.EasingStyle.Linear)
        local tween = TweenService:Create(rootPart, tweenInfo, {CFrame = CFrame.new(targetPosition)})

        tween:Play()

        tween.Completed:Wait()

        bodyVelocity:Destroy()
    end

    local httpService = cloneref(game:GetService("HttpService"))
    local mouse = player:GetMouse()
    local runService = cloneref(game:GetService("RunService"))

    -- //BASEPLATE\\

    pcall(function()
        baseplate = workspace:FindFirstChild("TeleportBaseplate") or Instance.new("Part", workspace)
        baseplate.Size = Vector3.new(50, 0.3, 50)
        baseplate.Anchored = true
        baseplate.Position = humanoidRootPart.Position + Vector3.new(0, 600, 0)
        baseplate.CanCollide = true
        baseplate.Name = "TeleportBaseplate"
        baseplate.Transparency = 0.5
    end)

    local function followPlayer()
        local playerPosition = humanoidRootPart.Position
        baseplate.Position = Vector3.new(playerPosition.X, playerPosition.Y - 3, playerPosition.Z)
    end

    local function sendNotification(title, text, duration)
        game.StarterGui:SetCore("SendNotification", { Title = title; Text = text; Duration = duration; })
    end

    -- //SETTINGS\\

    function readSettings()
        local settings
        if isfile("AOTRDRACOHUB.json") then
            settings = cloneref(game:GetService("HttpService")):JSONDecode(readfile("AOTRDRACOHUB.json"))
        else
            settings = {
                Fog = false, 
                prone = false, 
                chronicinjury = false,
                nightmare = false,
                notalents = false,
                noskills = false,
                noperks = false,
                PingSecret = false,
                PingLegendary = false,
                autojoin = false,
                startdelay = 3,
                map = "Giant Forest",
                difficulty = "Easy",
                objective = "1",
                profileslot = "A",
                PingAttackSerum = false,
                PingArmoredSerum = false,
                HealthToTPAt = 40,
                HealthStop = 98,
                delaykill = 11,
                resetontimer = false,
                resettimer = 360,
                autofarmtitansold = false,
                logrewards1 = false,
                AutoTP = false,
                autorefill = false,
                AutoReload = false,
                Escape = false,
                Retry = false,
                webhookinput = nil,
                SpamKey1 = false,
                SpamKey2 = false,
                SpamKey3 = false,
                SpamKey4 = false,
                SpamKey5 = false,
                SpamKeyinj = false,
                HitBoxExtender = false,
                HitBoxSize = 300,
                autorefillgas = false,
                resetstuck = false,
                distancey = 120,
                autohit = false,
                autusegas = false,
                speed = 2000,
                autofarmtitansnew = false,
                healinjury = false,
                autofarmraid = false,
                raidchest = false,
                autofarmtitansclose = false,
                autofarmraidalt = false,
                damagefarm = false,
                autofarmtitansalt = false,
                SpamKey1Health = 100,
                SpamKey2Health = 100,
                SpamKey3Health = 100,
                SpamKey4Health = 100,
                SpamKey5Health = 100,
                boostfps = false,
                disablerendering = false,
                exampletoggle = false,
                retryalt = false,
                autofarmtitansrisky = false,
                autorefillrisky = false,
                autorefillgasrisky = false,
                retryaltrisky = false,
                semihidename = false,
                hidename = false,
                raidchestfree = false,
                hitboxextender = false,
                hitboxsize = 100,
                autoupgrade = false,
                glasscannon = false,
                timetrial = false,
                opfarm = false,
                spindelay = 1,
                minimummoneymultiplied = 25,
                resetnoonikiri = false,
                kickplayersfromlobby = false,
                autojoinhardest = false,
                autorejoin = false,
                retryotheralt = false,
                autoprestige = false,
                chosentalent1 = nil,
                chosentalent2 = nil,
                chosentalent3 = nil,
                chosentalent4 = nil,
                chosentalent5 = nil,
                chosentalent6 = nil,
                chosenboost = "Luck"

            }

        end

        return settings
    end

    -- Function to save settings to a file
    function saveSettings(settings)
        writefile("AOTRDRACOHUB.json", cloneref(game:GetService("HttpService")):JSONEncode(settings))
    end

    -- Function to load settings when the GUI is executed
    function applySettings(settings)

        -- Auto Join Settings
        notalents = settings.NoTalents
        nightmare = settings.Nightmare
        fog = settings.Fog
        glasscannon = settings.GlassCannon
        timetrial = settings.TimeTrial
        noskills = settings.NoSkills
        oddball = settings.Oddball
        injuryprone = settings.InjuryProne
        chronicinjuries = settings.ChronicInjuries
        autojoin = settings.AutoJoin
        difficulty = settings.Difficulty
        objective = settings.Objective
        noperks = settings.NoPerks
        map = settings.Map
        profileslot = settings.ProfileSlot
        startdelay = settings.StartDelay
        gamemode = settings.GameMode

        -- Webhook Settings

        PingLegendary = settings.PingLegendary
        PingSecret = settings.PingSecret
        PingAttackSerum = settings.PingAttackSerum
        PingArmoredSerum = settings.PingArmoredSerum
        logrewards1 = settings.LogRewards1
        logrewards = settings.LogRewards
        webhookinput = settings.WebhookInput

        -- RISKY SETTINGS

        autofarmraidrisky = settings.AutoFarmRaidRisky
        autofarmtitansrisky = settings.AutoFarmTitansRisky
        autorefillrisky = settings.AutoRefillRisky
        autorefillgasrisky = settings.AutoRefillgasRisky
        retryaltrisky = settings.RetryAltRisky

        -- AutoFarm / Misc Settings

        distancey = settings.DistanceY
        delaykill = settings.DelayKill 
        resetontimer = settings.ResetOnTimer 
        autofarmtitansold = settings.AutoFarmTitansOld
        DistanceZ = settings.DistanceZ
        healthtpat = settings.HealthToTPAt
        healthstop = settings.HealthStop
        autotp = settings.AutoTP
        autorefillgas = settings.AutoRefillgas 
        autorefill = settings.AutoRefill
        autorel = settings.AutoReload
        escape = settings.Escape
        retry = settings.Retry
        retryalt = settings.RetryAlt
        spamkey1 = settings.SpamKey1
        spamkey2 = settings.SpamKey2
        spamkey3 = settings.SpamKey3
        spamkey4 = settings.SpamKey4
        spamkey5 = settings.SpamKey5
        spamkeyinj = settings.SpamKeyinj
        hitboxextender = settings.HitBoxExtender
        hitboxsize = settings.HitBoxSize
        resetstuck = settings.ResetStuck
        resettimer = settings.ResetTimer
        autohit = settings.AutoHit
        autusegas = settings.AutUseGas
        speed = settings.Speed
        autofarmtitansnew = settings.AutoFarmTitansNew
        healinjury = settings.HealInjury
        autofarmraid = settings.AutoFarmRaid
        raidchest = settings.RaidChest
        raidchestfree = settings.RaidChestFree
        autofarmtitansclose = settings.AutoFarmTitansClose
        autofarmtitansalt = settings.AutoFarmTitansAlt
        autofarmraidalt = settings.AutoFarmRaidAlt
        damagefarm = settings.DamageFarm
        spamkey1health = settings.SpamKey1Health
        spamkey2health = settings.SpamKey2Health
        spamkey3health = settings.SpamKey3Health
        spamkey4health = settings.SpamKey4Health
        spamkey5health = settings.SpamKey5Health
        boostfps = settings.BoostFps
        disablerendering = settings.DisableRendering
        exampletoggle = settings.ExampleToggle
        semihidename = settings.SemiHidename
        hidename = settings.HideName
        hitboxextender = settings.HitboxExtender
        shadowbancheck = settings.SHADOWBANCHECK
        hitboxsize = settings.HitboxSize
        autoupgrade = settings.AutoUpgrade
        opfarm = settings.OPFARM
        spindelay = settings.SpinDelay
        minimummoneymultiplied = settings.MinimumMoneyMultiplied
        resetnoonikiri = settings.ResetNoOnikiri
        kickplayersfromlobby = settings.KickPlayersFromLobby
        autojoinhardest = settings.AutoJoinHardest
        autorejoin = settings.AutoRejoin
        autoprestige = settings.AutoPrestige
        retryotheralt = settings.RetryOtherAlt
        chosentalent1 = settings.ChosenTalent1
        chosentalent2 = settings.ChosenTalent2
        chosentalent3 = settings.ChosenTalent3
        chosentalent4 = settings.ChosenTalent4
        chosentalent5 = settings.ChosenTalent5
        chosentalent6 = settings.ChosenTalent6
        chosenboost = settings.ChosenBoost

    end

    function loadSettings()
        settings = readSettings()
        applySettings(settings)
    end

    settings = readSettings()
    applySettings(settings)

    local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/vep1032/VepStuff/main/DRCO", true))()
    local coreGui = cloneref(game:GetService("CoreGui"))
    local orionUI

    while not orionUI do task.wait()
        for i,v in pairs(coreGui:GetDescendants()) do
            if v.Name == "Orion" or v.Name == "Orion Library" then
                print('ice')
                orionUI = v
            end
        end
        for i, x in ipairs(gethui():GetChildren()) do
            if x.Name == "Orion" or x.Name == "Orion Library" then 
                print(x)
                orionUI = x
            end
        end
    end

    local function createButtonUI()
        local buttonGui = Instance.new("ScreenGui", orionUI.Parent)
        buttonGui.Name = "ButtonUI"

        local backgroundFrame = Instance.new("Frame", buttonGui)
        backgroundFrame.Name = "BackgroundFrame"
        backgroundFrame.Size = UDim2.new(0, 60, 0, 60)
        backgroundFrame.Position = UDim2.new(1, -70, 0.5, -30)
        backgroundFrame.BackgroundColor3 = Color3.new(1, 0, 0)
        backgroundFrame.BorderSizePixel = 0
        backgroundFrame.Transparency = 1

        local button = Instance.new("ImageButton", backgroundFrame)
        button.Name = "OpenButton"
        button.Image = "rbxassetid://104832225542320"
        button.Size = UDim2.new(0, 50, 0, 50)
        button.Position = UDim2.new(0.5, -25, 0.5, -25)
        button.BackgroundTransparency = 1
        return button
    end

    local function toggleOrionUI()
        if orionUI then
            orionUI.Enabled = not orionUI.Enabled
            return true
        end
        return false
    end

    local button = createButtonUI()
    button.MouseButton1Click:Connect(toggleOrionUI)

    local Window = OrionLib:MakeWindow({Name = ".gg/dracohub", TestMode = false, SaveConfig = true, ConfigFolder = "DRACOSETTINGSAOTR",IntroEnabled = false })

    local mainTab = Window:MakeTab({Name = "Auto Join", Icon = "rbxassetid://4483345998", PremiumOnly = false})
    local imp = mainTab:AddSection({
        Name = "ENABLE LAST"
    })
    local Tab = Window:MakeTab({Name = "Farming", Icon = "rbxassetid://4483345998", PremiumOnly = false})
    local Tab5 = Window:MakeTab({Name = "Raid", Icon = "rbxassetid://4483345998", PremiumOnly = false})
    local Tab4 = Window:MakeTab({Name = "Farming Settings", Icon = "rbxassetid://4483345998", PremiumOnly = false})
    local Tab2 = Window:MakeTab({Name = "Skills", Icon = "rbxassetid://4483345998", PremiumOnly = false})
    local Tab3 = Window:MakeTab({Name = "Misc", Icon = "rbxassetid://4483345998", PremiumOnly = false})
    local TabC = Window:MakeTab({Name = "Spins", Icon = "rbxassetid://4483345998", PremiumOnly = false})
    local Tab6 = Window:MakeTab({Name = "Risky", Icon = "rbxassetid://4483345998", PremiumOnly = false})
    local Lobby = Window:MakeTab({Name = "Lobby", Icon = "rbxassetid://4483345998", PremiumOnly = false})

        --// LOAD IN WAIT\\
    --//THIS IS TO AVOID BUGS THAT HAPPEN IF YOU DONT WAIT FOR THE GAME TO LOAD\\
    --// LOAD COUNT IS THE FAILSAFE IF SOMETHING BUGS OUT IT BREAKS OUT LOOP AFTER 20 SECONDS\\

    local loadcount = 0

    --// LOBBY WAIT LOAD\\
    if game.PlaceId == 13379208636 or game.PlaceId == 14916516914 then
        while not player do task.wait()
            player = players.LocalPlayer
        end

        while not character do task.wait(.1)
            character = player.Character
            loadcount = loadcount + 1
            if loadcount > 200 then
                --print(loadcount)
                break
            end
        end

        --//MISSION OR RAID LOAD\\
    elseif game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
        local playergui = player:WaitForChild("PlayerGui")
        local Interface = playergui:WaitForChild("Interface")

        while not Interface:FindFirstChild("Soundtrack") do task.wait(.1)

            loadcount = loadcount + 1
            if loadcount > 200 then
                --print(loadcount)
                break 
            end

            if player.PlayerGui.Interface.Rewards and player.PlayerGui.Interface.Rewards.Visible then
                break
            end
        end
    end

    imp:AddSlider({
        Name = "Start Delay",
        Min = 0,
        Max = 10,
        Default = startdelay,
        Color = Color3.fromRGB(235, 127, 12), 
        Increment = 1,
        ValueName = "Seconds",
        Callback = function(state)
            startdelay = state
            settings.StartDelay = state
            saveSettings(settings)
        end
    })

    upgrading = false
    prestiging = false
    kickingplayers = false
    healing = false

    imp:AddToggle({
        Name = "Auto Join",
        Default = autojoin,
        Callback = function(state)
            autojoin = state
            settings.AutoJoin = state
            saveSettings(settings)
        end
    })

    imp:AddToggle({
        Name = "Auto Join Hardest Difficulty Unlocked",
        Default = autojoinhardest,
        Callback = function(state)
            autojoinhardest = state
            settings.AutoJoinHardest = state
            saveSettings(settings)
        end
    })

    local configSection = mainTab:AddSection({
        Name = "Configuration"
    })

    configSection:AddDropdown({
        Name = "Profile Slot",
        Options = {"A", "B", "C"},
        Default = profileslot,
        Callback = function(state)
            profileslot = state
            settings.ProfileSlot = state
            saveSettings(settings)
        end
    })

    configSection:AddDropdown({
        Name = "Gamemode",
        Options = {"Missions", "Raids"},
        Default = gamemode,
        Callback = function(state)
            gamemode = state
            settings.GameMode = state
            saveSettings(settings)
        end
    })

    configSection:AddDropdown({
        Name = "Map",
        Options = {"Shiganshina", "Trost", "Outskirts", "Giant Forest", "Utgard", "Loading Docks"},
        Default = map,
        Callback = function(state)
            map = state
            settings.Map = state
            saveSettings(settings)
        end
    })

    configSection:AddDropdown({
        Name = "Difficulty",
        Options = {"Easy", "Normal", "Hard", "Severe", "Aberrant"},
        Default = difficulty,
        Callback = function(state)
            difficulty = state
            settings.Difficulty = state
            saveSettings(settings)
        end
    })

    configSection:AddDropdown({
        Name = "Objective",
        Options = {"1", "2", "3"},
        Default = objective,
        Callback = function(state)
            objective = state
            settings.Objective = state
            saveSettings(settings)
        end
    })

    local modifiersex = mainTab:AddSection({
        Name = "Modifiers"
    })
    
    function GetCorner(sz, pos, anch)
        pos = typeof(pos) == 'UDim2' and Vector2.new(pos.X.Offset, pos.Y.Offset) or pos
        anch = anch or Vector2.new(0,0)
        return pos+(sz*anch)
    end
    
    if autojoin then
        OrionLib:MakeNotification({
            Name = "Starting autojoin in ".. startdelay .. " seconds",
            Content = "made by mysticzx",
            Image = "rbxassetid://4483345998",
            Time = 5
        })
    end

    -- Debug script that makes ur cursor red

    -- local player = game.Players.LocalPlayer
    -- local mouse = player:GetMouse()
    -- local runService = game:GetService("RunService")

    -- local screenGui = Instance.new("ScreenGui")
    -- screenGui.Parent = game:GetService("CoreGui")

    -- local square = Instance.new("Frame")
    -- square.Size = UDim2.new(0, 10, 0, 10)
    -- square.BackgroundColor3 = Color3.new(1, 0, 0)
    -- square.BorderSizePixel = 0
    -- square.AnchorPoint = Vector2.new(0.5, 0.5)
    -- square.Parent = screenGui

    -- local function updateGui()
    --     runService.RenderStepped:Connect(function()
    --         local mouseX = mouse.X
    --         local mouseY = mouse.Y
    --         square.Position = UDim2.new(0, mouseX, 0, mouseY)
    --     end)
    -- end

    -- updateGui()

    local yOffsetValues2 = {100, 90, 80, 70, 60, 50, 40}
    local xOffsetValues = {100, 90, 80, 70, 60, 50, 40}

    local modifiersSet = false
    local objectiveset = false

    task.spawn(function()
        while task.wait() do
            local success, err = pcall(function()
                if (autojoin or autojoinhardest) and not upgrading and not prestiging then

                    if game.PlaceId == 13379208636 then
                        local titleScreen = player.PlayerGui.Interface.Title_Screen
                        repeat task.wait() until titleScreen.Slots.A:FindFirstChild("Player")
                        while not titleScreen.Slots.A:FindFirstChild("Player") or not titleScreen.Slots.A.Player:FindFirstChild("Camera") and autojoin do
                            task.wait()
                        end

                        if titleScreen.Slots.Visible then
                            press(titleScreen.Slots[profileslot]["Select_" .. profileslot])
                            task.wait(.05)
                        end

                        task.wait(2)

                        if not titleScreen.Slots.Visible then
                            press(titleScreen.Buttons.Play)
                        end

                    elseif game.PlaceId == 14916516914 and not upgrading and not prestiging then
                        local gearUpMission = player.PlayerGui.Interface.Gear_Up.Mission.Main
                        local missionSelection = player.PlayerGui.Interface.Missions.Prompt.Main.Selection
                        local missionButton = missionSelection[gamemode]
                        local AccMission = player.PlayerGui.Interface.Missions[gamemode]
                        local missionMain = AccMission.Main
                        local missionInfo = player.PlayerGui.Interface.Missions.Info
                        local createbutton = AccMission.Main.Info.Main.Buttons["Creation_"..gamemode]
                        local mapframe
                        if gamemode ~= "Raids" then
                            mapframe = missionMain.Maps.Maps[map.."_"..gamemode]
                        end
                        local startbutton = missionInfo.Main.Info.Main.Info_Buttons.Begin
                        local objectivestuff

                        if gamemode == "Missions" then
                            objectivestuff = missionMain.Info.Objectives
                        end

                        task.wait(1)

                        while upgrading or player.PlayerGui:FindFirstChild("Loader") or prestiging do
                            task.wait()
                        end

                        while not upgrading and not player.PlayerGui:FindFirstChild("Loader") and not prestiging and not player.PlayerGui.Interface.Gear_Up.Visible do task.wait(.2)
                            realClick(player.PlayerGui.Interface.Topbar.Main.Categories.Gear_Up.Interact)
                        end

                        while not player.PlayerGui.Interface.Missions.Visible and not missionInfo.Visible and (autojoin or autojoinhardest) and not upgrading and not prestiging do task.wait(.1)
                            press(gearUpMission)
                        end

                        while upgrading or player.PlayerGui:FindFirstChild("Loader") or prestiging do
                            task.wait()
                        end

                        while player.PlayerGui.Interface.Missions.Prompt.Visible and (autojoin or autojoinhardest) and not upgrading and not prestiging do task.wait(.1)
                            press(missionButton)
                        end

                        if autojoin and not autojoinhardest then
                            while not missionMain.Info.Main.Difficulty.Difficulties[difficulty].Visible and not missionInfo.Visible and AccMission.Visible and autojoin do
                                press(missionMain.Info.Main.Difficulty["Forward_"..gamemode])
                                task.wait(.3)
                            end
                        elseif autojoinhardest and not autojoin then
                            local difficultyOrder = {"Aberrant", "Severe", "Hard", "Normal", "Easy"}
                            local currentDifficultyIndex = 1
                        
                            while autojoinhardest and not missionMain.Info.Main.Difficulty.Difficulties.Aberrant.Visible and not missionInfo.Visible and AccMission.Visible do
                                press(missionMain.Info.Main.Difficulty["Forward_" .. gamemode])
                                task.wait(.3)
                            end

                            while autojoinhardest and not missionInfo.Visible and AccMission.Visible do
                                local currentDifficulty = difficultyOrder[currentDifficultyIndex]

                                if createbutton.Visible then
                                    break
                                end

                                if currentDifficultyIndex < #difficultyOrder then
                                    press(missionMain.Info.Main.Difficulty["Backward_" .. gamemode])
                                    currentDifficultyIndex += 1
                                else
                                    currentDifficultyIndex = 1
                                end

                                task.wait(.3)
                            end
                        end

                        if gamemode ~= "Raids" and mapframe and (map == "Utgard" or map == "Giant Forest" or map == "Loading Docks") and AccMission.Visible then
                            player.PlayerGui.Interface.Missions.Missions.Main.Maps.Maps.CanvasPosition = Vector2.new(0, 400)
                        end

                        while gamemode ~= "Raids" and mapframe and mapframe.Icon.Stroke.Transparency ~= 0 and AccMission.Visible and (autojoin or autojoinhardest) and not upgrading and not prestiging do task.wait()
                            press(mapframe.Icon)
                            task.wait(.3)
                        end

                        if objective ~= "1" and gamemode ~= "Raids" and AccMission.Visible and objectivestuff and not objectivestuff.Visible and not objectiveset then
                            press(AccMission.Main.Info.Main.Buttons["Objectives_"..gamemode])
                            task.wait(.3)
                        end

                        if objective ~= "1" and gamemode ~= "Raids" and AccMission.Visible and objectivestuff and objectivestuff.Visible and not objectiveset then
                            for _,v in pairs(objectivestuff:GetChildren()) do
                                if v:IsA("Frame") then
                                    if objective == "3" and v.Name == "Random" and v.Size ~= Vector2.new(0.314999998, 0.89200002) then
                                        press(v)
                                        task.wait(.3)
                                        objectiveset = true
                                    elseif objective == "2" and v.Name ~= "Random" and v.Name ~= "Skirmish" and v.Size ~= Vector2.new(0.314999998, 0.89200002) then
                                        press(v)
                                        task.wait(.3)
                                        objectiveset = true
                                    end
                                end
                            end
                        end

                        if gamemode ~= "Raids" and objectivestuff and objectivestuff.Visible then
                            press(objectivestuff.Objectives_Buttons.Objectives_Return)
                            task.wait(.3)
                        end

                        while createbutton and AccMission.Visible and (autojoin or autojoinhardest) do task.wait()
                            press(createbutton)
                            task.wait(.3)
                        end

                        while missionInfo.Visible and not missionInfo.Main.Info.Modifiers.Visible and (autojoin or autojoinhardest) and not modifiersSet do task.wait()
                            press(missionInfo.Main.Info.Main.Info_Buttons.Modify)
                            task.wait(.3)
                        end
                    end
                    if upgrading or prestiging then return end
                end
            end)
            if not success then warn(err) end
        end
    end)

    local modop
    local obj10
    local obj11
    local obj12
    local obj13
    local obj14
    local obj15
    local obj16
    local obj17
    local obj18
    local obj19

    if game.PlaceId == 14916516914 then
        pcall(function()
            modopt = player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Options
            obj20 = player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Modifiers_Buttons.Return
            obj21 = player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Info_Buttons.Begin
        end)
    end

    local alreadyScrolled = false

    local function processModifier(obj, dependency)
        local success, err = pcall(function()
            if dependency then
                while dependency.Checkmark.ImageTransparency == 1 do
                    task.wait()
                end
            end

            if obj and obj.Checkmark.ImageTransparency == 1 then
                while obj and obj.Checkmark.ImageTransparency == 1 do task.wait()
                    press(obj)
                    task.wait(.5)
                end
            end
        end)
        if not success then warn(err) end
    end

    local function scrollIfNeeded()
        local interface = player.PlayerGui.Interface
        local missions = interface.Missions
        local info = missions.Info.Main.Info.Modifiers.Options

        local canvasHeight = info.CanvasSize.Y.Offset
        local viewHeight = info.AbsoluteWindowSize.Y

        local targetPosition = (canvasHeight - viewHeight) * -1.1

        info.CanvasPosition = Vector2.new(0, targetPosition)
        task.wait(1)
    end

    local function runModifiers()
        while true do
            task.wait(.1)
            if (autojoin or autojoinhardest) and player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Visible then
                obj10 = modopt["No Perks"].Selected
                obj11 = modopt["No Skills"].Selected
                obj12 = modopt["No Talents"].Selected
                obj13 = modopt["Nightmare"].Selected
                obj14 = modopt["Oddball"].Selected
                obj15 = modopt["Injury Prone"].Selected
                obj16 = modopt["Chronic Injuries"].Selected
                obj17 = modopt["Fog"].Selected
                obj18 = modopt["Glass Cannon"].Selected
                obj19 = modopt["Time Trial"].Selected

                if noperks then
                    processModifier(obj10, nil)
                end
                if noskills then
                    processModifier(obj11, noperks and obj10 or nil)
                end
                if notalents then
                    processModifier(obj12, noskills and obj11 or nil)
                end
                if nightmare then
                    processModifier(obj13, notalents and obj12 or nil)
                end
                if oddball then
                    processModifier(obj14, nightmare and obj13 or nil)
                end
                if injuryprone or chronicinjuries or fog or glasscannon or timetrial then
                    scrollIfNeeded()
                end
                if injuryprone then
                    processModifier(obj15, oddball and obj14 or nil)
                end
                if chronicinjuries then
                    processModifier(obj16, injuryprone and obj15 or nil)
                end
                if fog then
                    processModifier(obj17, chronicinjuries and obj16 or nil)
                end
                if glasscannon then
                    processModifier(obj18, fog and obj17 or nil)
                end
                if timetrial then
                    processModifier(obj19, glasscannon and obj18 or nil)
                end

                modifiersSet = true
                local obj20 = player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Modifiers_Buttons.Modifiers_Return
                local obj21 = player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Info_Buttons.Begin

                for _ = 1,10 do
                    if player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Visible then
                        press(obj20)
                        task.wait(.5)
                    end
                    if not player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Visible and player.PlayerGui.Interface.Missions.Info.Visible and not kickingplayers then
                        press(obj21)
                        task.wait(.5)
                    end
                end

                break
            end
        end
    end

    modifiersex:AddToggle({
        Name = "No Perks",
        Default = noperks,
        Callback = function(state)
            noperks = state
            settings.NoPerks = state
            saveSettings(settings)
            if noperks and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    })
    
    modifiersex:AddToggle({
        Name = "No Skills",
        Default = noskills,
        Callback = function(state)
            noskills = state
            settings.NoSkills = state
            saveSettings(settings)
            if noskills and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    })
    
    modifiersex:AddToggle({
        Name = "No Talents",
        Default = notalents,
        Callback = function(state)
            notalents = state
            settings.NoTalents = state
            saveSettings(settings)
            if notalents and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    })

    modifiersex:AddToggle({
        Name = "Nightmare",
        Default = nightmare,
        Callback = function(state)
            nightmare = state
            settings.Nightmare = state
            saveSettings(settings)
            if nightmare and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    })

    modifiersex:AddToggle({
        Name = "Oddball",
        Default = oddball,
        Callback = function(state)
            oddball = state
            settings.Oddball = state
            saveSettings(settings)
            if oddball and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    })
    
    modifiersex:AddToggle({
        Name = "Injury Prone", 
        Default = injuryprone,
        Callback = function(state)
            injuryprone = state
            settings.InjuryProne = state
            saveSettings(settings)
            if injuryprone and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    })
    
    modifiersex:AddToggle({
        Name = "Chronic Injuries", 
        Default = chronicinjuries,
        Callback = function(state)
            chronicinjuries = state
            settings.ChronicInjuries = state
            saveSettings(settings)
            if chronicinjuries and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    })

    modifiersex:AddToggle({
        Name = "Fog",
        Default = fog,
        Callback = function(state)
            fog = state
            settings.Fog = state
            saveSettings(settings)
            if fog and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    })

    modifiersex:AddToggle({
        Name = "Glass Cannon",
        Default = glasscannon,
        Callback = function(state)
            glasscannon = state
            settings.GlassCannon = state
            saveSettings(settings)
            if glasscannon and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    })

    modifiersex:AddToggle({
        Name = "Time Trial",
        Default = timetrial,
        Callback = function(state)
            timetrial = state
            settings.TimeTrial = state
            saveSettings(settings)
            if glasscannon and game.PlaceId == 14916516914 then
                task.spawn(runModifiers)
            end
        end
    })

    iterationsWithoutKick = 0
    local initialscrollalreadydone = false
    local alreadyactivated = false

    local function autoscroll()
        alreadyactivated = true
        while task.wait() do
            if kickplayersfromlobby then
                if not player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Visible and player.PlayerGui.Interface.Missions.Info.Visible then
                    local playerstokickscroll = player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players

                    local canvasHeight = playerstokickscroll.CanvasSize.Y.Offset
                    local viewHeight = playerstokickscroll.AbsoluteWindowSize.Y

                    if not initialscrollalreadydone then
                        playerstokickscroll.CanvasPosition = Vector2.new(0, (canvasHeight - viewHeight) * -0.25)
                        initialscrollalreadydone = true
                    end

                    task.wait(3)
                    playerstokickscroll.CanvasPosition = Vector2.new(0, (canvasHeight - viewHeight) * -1.1)
                    task.wait(3)
                    playerstokickscroll.CanvasPosition = Vector2.new(0, (canvasHeight - viewHeight) * -0.25)
                end
            end
        end
    end
    
    modifiersex:AddToggle({
        Name = "Kick Players From Lobby",
        Default = kickplayersfromlobby,
        Callback = function(state)
            kickplayersfromlobby = state
            settings.KickPlayersFromLobby = state
            saveSettings(settings)
            if kickplayersfromlobby and game.PlaceId == 14916516914 then
                task.spawn(function()
                    while kickplayersfromlobby do task.wait()
                        local foundKickVisible = false
                        
                        if not player.PlayerGui.Interface.Missions.Info.Main.Info.Modifiers.Visible and player.PlayerGui.Interface.Missions.Info.Visible then

                            if not alreadyactivated then
                                task.spawn(autoscroll)
                                task.wait(.1)
                            end

                            for _, v in pairs(player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players:GetChildren()) do
                                if v.Name == "Slot" and v:FindFirstChild("Kick") and v.Kick.Visible then
                                    foundKickVisible = true
                                    kickingplayers = true
                                    
                                    press(v.Kick)
                                    task.wait(.05)
                                end
                            end

                            if foundKickVisible then
                                iterationsWithoutKick = 0
                            else
                                iterationsWithoutKick = iterationsWithoutKick + 1
                                if iterationsWithoutKick >= 25 then
                                    kickingplayers = false
                                end
                            end
                        end
                    end
                end)
            end
        end
    })

    local UserInputService = cloneref(game:GetService("UserInputService"))

    local function clickCenterScreen()
        local clickX = math.floor(screenWidth * 0.95)
        local clickY = math.floor(screenHeight * 0.95)
        vim:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
        vim:SendMouseButtonEvent(clickX, clickY, 0, false, game, 0)
    end

    -- //AUTOFARM\\

    sigmaskibidi = false
    skibidirefill = false
    moveCancelled = false
    sigmarefill = nil
    tplow = false
    foundtitanyes = false

    Tab:AddToggle({
        Name = "Autofarm All Titans",
        Default = autofarmtitansold,
        Callback = function(state)
            autofarmtitansold = state
            settings.AutoFarmTitansOld = state
            saveSettings(settings)
    
            if autofarmtitansold and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and not damagefarm and Workspace:GetAttribute("Type") == "Missions" then
                task.spawn(function()
                    oldKillCount = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()
                    local idlespot

                    -- Delete Objects
                    pcall(function()
                        Workspace.Climbable.Buildings:Destroy()
                        for _, deleted in pairs(Workspace.Unclimbable:GetChildren()) do
                            if deleted.Name ~= "Reloads" and deleted.Name ~= "Cutscene" and deleted.Name ~= "Plane" and deleted.Name ~= "Objective" then
                                deleted:Destroy()
                            end
                        end
                    end)

                    -- Auto Use Gas
                    local function AutoUseGas()
                        while autofarmtitansold do task.wait()
                            if not skibidirefill and foundtitanyes then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    -- M1 Check
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmtitansold do task.wait()
                            if skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmtitansold do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                humanoid.Health = 0
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(autoresetnoblades_orrefills)

                    -- Start of Auto Farm
                    while autofarmtitansold do task.wait()
                        foundtitanyes = false
                        -- Remove Shiganshina Walls
                        task.spawn(function()
                            pcall(function()
                                task.wait(.5)
                                if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                    game.Workspace.Climbable.Walls:Destroy()
                                end
                            end)
                        end)

                        while player:GetAttribute("Cutscene") == true do
                            task.wait()
                        end

                        local success, err = pcall(function()
                            local closestTitan = nil
                            local closestDistance = math.huge
                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit") and titan.Hitboxes.Hit:FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and titan:FindFirstChild("Head") and not humanoid.PlatformStand then
                                    if titan:GetAttribute("Type") == "Colossal" and titan:GetAttribute("State") ~= "Idle" or titan:GetAttribute("Type") ~= "Colossal" then
                                        if workspace:GetAttribute("Objective") == "Stall" then
                                            distance = (titan.Head.Position - Vector3.new(-734, 18, 641)).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Protect" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Protect.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Escort" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Escort.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Guard" then
                                            if not idlespot then
                                                idlespot = workspace.Unclimbable.Objective.Guard.Objective.Position
                                            end
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Guard.Objective.Position).magnitude
                                            if distance > 700 then
                                                continue
                                            end
                                        elseif workspace:GetAttribute("Objective") == "Defend" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Defend.Objective.Position).magnitude
                                        else
                                            distance = (titan.Head.Position - humanoidRootPart.Position).magnitude
                                        end
                                        if distance < closestDistance then
                                            closestDistance = distance
                                            closestTitan = titan
                                        end
                                    end
                                end
                            end

                            if closestTitan then
                                foundtitanyes = true
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                    titanStartTime = os.clock()
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()
                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()
                                    -- Blade variables
                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- Gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)
    
                                    nape.Size, nape.CanCollide, nape.Anchored = Vector3.new(300, 300, 300), false, false

                                    -- Refill Section
                                    while (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) do
                                        task.wait()
                                        bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                        gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                        gaspercentageNumber = stringToNumber(gaspercentagetext)
                                        gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                        while skibidirefill do task.wait()
                                            if not moveInProgress and not moveCancelled and not sigmarefill then
                                                moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                            end
                                        end

                                        if not moveInProgress and not moveCancelled and not sigmarefill then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                        elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                            break
                                        end

                                        if bladeSetsText == "3 / 3" or not autofarmtitansold or gaspercentageNumber > 95 then
                                            break
                                        end
                                    end

                                    -- Teleport to Titan
                                    local distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude
                                    if not notfirsttp then
                                        if distance < 800 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if distance > 1200 then
                                            notfirsttp = true
                                            moveTo(character, humanoidRootPart.Position + Vector3.new(0, 50, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if distance < 2000 and not notfirsttp then
                                            notfirsttp = true
                                            moveTo(character, humanoidRootPart.Position + Vector3.new(0, 50, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if not notsecondtp then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                            notsecondtp = true
                                        end

                                        -- Attack Titan
                                    elseif notfirsttp and notsecondtp then
                                        local tp_time = os.clock() + 0.5
                                        -- local printed = false

                                        while os.clock() < tp_time do task.wait()
                                            -- if not printed then
                                            --     print("Waiting Above Titan...")
                                            --     printed = true
                                            -- end
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            if not currentTitan:FindFirstChild("Head") then
                                                break
                                            end
                                        end

                                        clickCenterScreen()
                                        clickCenterScreen()
                                        fastmoveto(character, currentTitanHead.Position + Vector3.new(0, distancey, 0))
                                        --print("finished attacking")
                                    end

                                    -- Check if refill
                                    if (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) then
                                        break
                                    end

                                    -- Failsafe
                                    local elapsedTime = os.clock() - titanStartTime
                                    if elapsedTime >= 60 and currentTitan:FindFirstChild("Humanoid") then
                                        sigmaskibidi = true
                                        for _ = 1, 8 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            while humanoid.PlatformStand do
                                                task.wait()
                                            end

                                            while player:GetAttribute("Cutscene") == true do
                                                task.wait()
                                            end

                                            local teleportEndTime = os.clock() + 3
                                            while os.clock() < teleportEndTime do
                                                task.wait()
                                                fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 500, 0))
                                            end

                                            while skibidirefill do
                                                task.wait()
                                            end

                                            clickCenterScreen()
                                            clickCenterScreen()
                                            task.wait(0.1)
                                            fastmoveto(character, currentTitan.Nape.CFrame)
                                        end

                                        for _ = 1, 1000 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            humanoid.Health = 0
                                            task.wait(.1)
                                        end
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        moveCancelled = true
                                        break
                                    end
                                until moveCancelled and not skibidirefill or (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and autotp or not autofarmtitansold or not currentTitan:FindFirstChild("Humanoid") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand or not currentTitan:FindFirstChild("Head") or currentTitan:GetAttribute("Type") == "Colossal" and currentTitan:GetAttribute("State") == "Idle"

                                -- Timeout Loop
                                if moveCancelled and not humanoid.PlatformStand then
                                    local cancelStartTime = os.clock()
                                    while os.clock() - cancelStartTime < 2 do task.wait()
                                        moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                    end
                                end
                            else
                                if idlespot then
                                    moveTo(character, idlespot + Vector3.new(0, 200, 0))
                                end
                            end

                            -- Health Recovery Loop
                            while (humanoid.Health / humanoid.MaxHealth) * 100 <= healthstop and autofarmtitansold and autotp do
                                task.wait()
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    -- \\EMD OF AUTOFARM//

    Tab:AddToggle({
        Name = "Autofarm Titans ALT",
        Default = autofarmtitansalt,
        Callback = function(state)
            autofarmtitansalt = state
            settings.AutoFarmTitansAlt = state
            saveSettings(settings)
            if autofarmtitansalt and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and not autofarmtitansold and not damagefarm and Workspace:GetAttribute("Type") == "Missions" then
                task.spawn(function()
                    oldKillCount = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()
                    local idlespot

                    -- Delete Objects
                    pcall(function()
                        Workspace.Climbable.Buildings:Destroy()
                        for _, deleted in pairs(Workspace.Unclimbable:GetChildren()) do
                            if deleted.Name ~= "Reloads" and deleted.Name ~= "Cutscene" and deleted.Name ~= "Plane" and deleted.Name ~= "Objective" then
                                deleted:Destroy()
                            end
                        end
                    end)

                    -- Auto Use Gas
                    local function AutoUseGas()
                        while autofarmtitansalt do task.wait()
                            if not skibidirefill and foundtitanyes then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    -- M1 Check
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmtitansalt do task.wait()
                            if skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmtitansalt do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                humanoid.Health = 0
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(autoresetnoblades_orrefills)

                    -- Start of Auto Farm
                    while autofarmtitansalt do task.wait()
                        foundtitanyes = false
                        -- Remove Shiganshina Walls
                        task.spawn(function()
                            pcall(function()
                                task.wait(.5)
                                if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                    game.Workspace.Climbable.Walls:Destroy()
                                end
                            end)
                        end)

                        while player:GetAttribute("Cutscene") == true do
                            task.wait()
                        end

                        local success, err = pcall(function()
                            local closestTitan = nil
                            local closestDistance = math.huge
                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit") and titan.Hitboxes.Hit:FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and titan:FindFirstChild("Head") and not humanoid.PlatformStand then
                                    if titan:GetAttribute("Type") == "Colossal" and titan:GetAttribute("State") ~= "Idle" or titan:GetAttribute("Type") ~= "Colossal" then
                                        if workspace:GetAttribute("Objective") == "Stall" then
                                            distance = (titan.Head.Position - Vector3.new(-734, 18, 641)).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Protect" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Protect.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Escort" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Escort.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Guard" then
                                            if not idlespot then
                                                idlespot = workspace.Unclimbable.Objective.Guard.Objective.Position
                                            end
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Guard.Objective.Position).magnitude
                                            if distance > 700 then
                                                continue
                                            end
                                        elseif workspace:GetAttribute("Objective") == "Defend" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Defend.Objective.Position).magnitude
                                        else
                                            distance = (titan.Head.Position - humanoidRootPart.Position).magnitude
                                        end
                                        if distance < closestDistance then
                                            closestDistance = distance
                                            closestTitan = titan
                                        end
                                    end
                                end
                            end

                            if closestTitan then
                                foundtitanyes = true
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                    titanStartTime = os.clock()
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()
                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()
                                    -- Blade variables
                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- Gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)

                                    nape.Size, nape.CanCollide, nape.Anchored = Vector3.new(300, 300, 300), false, false

                                    -- Refill Section
                                    while (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) do
                                        task.wait()
                                        bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                        gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                        gaspercentageNumber = stringToNumber(gaspercentagetext)
                                        gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                        while skibidirefill do
                                            task.wait()
                                            if not moveInProgress and not moveCancelled and not sigmarefill then
                                                moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                            end
                                        end

                                        if not moveInProgress and not moveCancelled and not sigmarefill then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                        elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                            break
                                        end

                                        if bladeSetsText == "3 / 3" or not autofarmtitansalt or gaspercentageNumber > 95 then
                                            break
                                        end
                                    end

                                    -- Teleport to Titan
                                    local distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude
                                    if not notfirsttp then
                                        if distance < 800 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if distance > 1200 then
                                            notfirsttp = true
                                            moveTo(character, humanoidRootPart.Position + Vector3.new(0, 50, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if distance < 2000 and not notfirsttp then
                                            notfirsttp = true
                                            moveTo(character, humanoidRootPart.Position + Vector3.new(0, 50, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 150, 0))
                                        end

                                        if not notsecondtp then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                            notsecondtp = true
                                        end

                                        -- Attack Titan
                                    elseif notfirsttp and notsecondtp then
                                        local tp_time = os.clock() + 0.5
                                        --local printed = false

                                        while os.clock() < tp_time do task.wait()
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            if not currentTitan:FindFirstChild("Head") then
                                                break
                                            end
                                        end

                                            --[[
                                            if not printed then
                                                print("Waiting Above Titan...")
                                                printed = true
                                            end
                                        end
                                        ]]

                                        clickCenterScreen()
                                        clickCenterScreen()
                                        --print("attacking titan")
                                        fastmoveto(character, currentTitanHead.Position + Vector3.new(0, distancey, 0))
                                        --print("finished attacking")
                                    end

                                    -- Check if refill
                                    if (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) then
                                        break
                                    end

                                    -- Failsafe
                                    local elapsedTime = os.clock() - titanStartTime
                                    if elapsedTime >= 60 and currentTitan:FindFirstChild("Humanoid") then
                                        sigmaskibidi = true
                                        for _ = 1, 8 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            while humanoid.PlatformStand do
                                                task.wait()
                                            end

                                            while player:GetAttribute("Cutscene") == true do
                                                task.wait()
                                            end

                                            local teleportEndTime = os.clock() + 3
                                            while os.clock() < teleportEndTime do
                                                task.wait()
                                                fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 500, 0))
                                            end

                                            while skibidirefill do
                                                task.wait()
                                            end

                                            clickCenterScreen()
                                            clickCenterScreen()
                                            task.wait(.1)
                                            fastmoveto(character, currentTitan.Nape.CFrame)
                                        end

                                        for _ = 1, 1000 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            humanoid.Health = 0
                                            task.wait(.1)
                                        end
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        moveCancelled = true
                                        break
                                    end
                                until moveCancelled and not skibidirefill or (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and autotp or not autofarmtitansalt or not currentTitan:FindFirstChild("Humanoid") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand or not currentTitan:FindFirstChild("Head") or currentTitan:GetAttribute("Type") == "Colossal" and currentTitan:GetAttribute("State") == "Idle"

                                -- Timeout Loop
                                if moveCancelled and not humanoid.PlatformStand then
                                    local cancelStartTime = os.clock()
                                    while os.clock() - cancelStartTime < 2 do
                                        task.wait()
                                        moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                    end
                                end
                            else
                                if idlespot then
                                    moveTo(character, idlespot + Vector3.new(0, 200, 0))
                                end
                            end

                            -- Health Recovery Loop
                            while (humanoid.Health / humanoid.MaxHealth) * 100 <= healthstop and autofarmtitansalt and autotp do
                                task.wait()
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    Tab:AddToggle({
        Name = "Auto Hit",
        Default = autohit,
        Callback = function(state)
            autohit = state
            settings.AutoHit = state
            saveSettings(settings)
            if autohit and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and not damagefarm then
                task.spawn(function()
                    while autohit do task.wait()
                        pcall(function()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset

                            local clickX = math.floor(screenWidth * 0.95)
                            local clickY = math.floor(screenHeight * 0.95)

                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and humanoid.PlatformStand == false and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency ~= 1 and sigmaskibidi == false then
                                    local distance = (humanoidRootPart.Position - titan.Head.Position).Magnitude
                                    if distance < 300 then
                                        vim:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
                                        vim:SendMouseButtonEvent(clickX, clickY, 0, false, game, 0)
                                        task.wait(.2)
                                    end
                                end
                            end
                        end)
                    end
                end)
            end
        end
    })

    Tab:AddToggle({
        Name = "Auto Refill Blades",
        Default = autorefill,
        Callback = function(state)
            autorefill = state
            settings.AutoRefill = state
            saveSettings(settings)
            if autorefill and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    local refill_count = 0

                    local function getAnimationTrack()
                        local tracks = humanoid:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://15406891131" then
                                return track
                            end
                        end
                        return nil
                    end

                    local positions = {
                        [3] = Vector3.new(0,0,2),
                        [6] = Vector3.new(0,0,4),
                        [8] = Vector3.new(0,0,6),
                        [10] = Vector3.new(0,0,8),
                        [13] = Vector3.new(0,0,-2),
                        [16] = Vector3.new(0,0,-4),
                        [20] = Vector3.new(0,0,-6)
                    }

                    RefillStation = nil

                    while autorefill do task.wait()
                        local success, err = pcall(function()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")

                            if workspace.Unclimbable.Reloads:FindFirstChild("GasTanks") and not RefillStation then
                                RefillStation = workspace.Unclimbable.Reloads.GasTanks.Refill.CFrame
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            while bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and humanoid.PlatformStand == false and gradientOffset.X == 0 and not tplow do task.wait()
                                skibidirefill = true
                                --print("Refilling Status:", skibidirefill)

                                while humanoid.PlatformStand do
                                    task.wait()
                                end

                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end

                                while player.PlayerGui.Interface.HUD.Visible == false do
                                    task.wait()
                                end

                                moveCancelled = true
                                sigmarefill = true

                                while moveInProgress do
                                    task.wait()
                                end

                                -- //TP REFILL\\

                                moveTo(character, RefillStation.Position + Vector3.new(0, 300, 0))
                                moveCancelled = true
                                moveTo(character, RefillStation.Position + positions[6])

                                -- //PRESS R\\

                                local animationTrack = getAnimationTrack()

                                while not animationTrack do
                                    vim:SendKeyEvent(true, Enum.KeyCode.R, false, game)
                                    vim:SendKeyEvent(false, Enum.KeyCode.R, false, game)
                                    task.wait(0.05)
                                    animationTrack = getAnimationTrack()
                                    refill_count = refill_count + 1

                                    while player.PlayerGui.Interface.HUD.Visible == false do
                                        task.wait()
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    if positions[refill_count] then
                                        moveTo(character, RefillStation.Position + positions[refill_count])
                                    end

                                    if refill_count == 25 then
                                        break
                                    end
                                end

                                if animationTrack then
                                    local finishedPlaying = false
                                    animationTrack.Stopped:Connect(function()
                                        finishedPlaying = true
                                    end)

                                    local tp_away_refill = os.clock() + 7
                                    while os.clock() < tp_away_refill do task.wait()
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        moveCancelled = true
                                        --print("moving above refill")
                                        moveTo(character, RefillStation.Position + Vector3.new(0, 300, 0))
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                if not animationTrack then
                                    local tp_away_refill = os.clock() + 6
                                    while os.clock() < tp_away_refill do task.wait()
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\
    
                                        moveCancelled = true
                                        --print("moving above refill")
                                        moveTo(character, RefillStation.Position + Vector3.new(0, 300, 800))
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                moveCancelled = false
                                skibidirefill = false
                                sigmarefill = false
                                --print("Refilling Status:", skibidirefill)
                            end
                            refill_count = 0
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    Tab:AddToggle({
        Name = "Auto Refill Gas",
        Default = autorefillgas,
        Callback = function(state)
            autorefillgas = state
            settings.AutoRefillgas = state
            saveSettings(settings)
            if autorefillgas and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    local refill_count = 0

                    local function getAnimationTrack()
                        local tracks = humanoid:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://15406891131" then
                                return track
                            end
                        end
                        return nil
                    end

                    local positions = {
                        [3] = Vector3.new(0,0,2),
                        [6] = Vector3.new(0,0,4),
                        [8] = Vector3.new(0,0,6),
                        [10] = Vector3.new(0,0,8),
                        [13] = Vector3.new(0,0,-2),
                        [16] = Vector3.new(0,0,-4),
                        [20] = Vector3.new(0,0,-6)
                    }

                    RefillStation = nil

                    while autorefillgas do task.wait()
                        local success, err = pcall(function()
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
                            local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                            local gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))

                            if workspace.Unclimbable.Reloads:FindFirstChild("GasTanks") and not RefillStation then
                                RefillStation = workspace.Unclimbable.Reloads.GasTanks.Refill.CFrame
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            while gaspercentagetext <= 2 and humanoid.PlatformStand == false and gradientOffset.Y == 0 and not tplow do task.wait()
                                --print("1 gradientOffset:", gradientOffset.Y, "gaspercentagetext:", gaspercentagetext)
                                skibidirefill = true

                                gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))

                                while humanoid.PlatformStand do
                                    task.wait()
                                end

                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end

                                moveCancelled = true
                                sigmarefill = true

                                while moveInProgress do
                                    task.wait()
                                end

                                -- //TP REFILL\\

                                moveTo(character, RefillStation.Position + Vector3.new(0, 300, 0))
                                moveCancelled = true
                                moveTo(character, RefillStation.Position + positions[6])
                                --task.wait(.4)

                                -- //PRESS R\\

                                local animationTrack = getAnimationTrack()

                                while not animationTrack and gaspercentagetext <= 2 do
                                    vim:SendKeyEvent(true, Enum.KeyCode.R, false, game)
                                    vim:SendKeyEvent(false, Enum.KeyCode.R, false, game)
                                    task.wait(0.05)
                                    animationTrack = getAnimationTrack()
                                    refill_count = refill_count + 1
                                    while player.PlayerGui.Interface.HUD.Visible == false do
                                        task.wait()
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    if positions[refill_count] then
                                        humanoidRootPart.CFrame = RefillStation * positions[refill_count]
                                    end

                                    if refill_count == 25 then
                                        break
                                    end
                                end

                                if animationTrack then
                                    local finishedPlaying = false
                                    animationTrack.Stopped:Connect(function()
                                        finishedPlaying = true
                                    end)

                                    local tp_away_gas = os.clock() + 7
                                    while os.clock() < tp_away_gas do task.wait()
                                        gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                        gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        moveCancelled = true
                                        --print("moving above refill")
                                        moveTo(character, RefillStation.Position + Vector3.new(0, 300, 0))
                                        task.wait(.1)
                                        if finishedPlaying or gaspercentagetext > 90 or gradientOffset.Y == 1 then
                                            break
                                        end
                                    end
                                end

                                if not animationTrack then
                                    local tp_away_gas = os.clock() + 6
                                    while os.clock() < tp_away_gas do task.wait()
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        moveCancelled = true
                                        --print("moving above refill")
                                        moveTo(character, RefillStation.Position + Vector3.new(0, 300, 800))
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                moveCancelled = false
                                skibidirefill = false
                                sigmarefill = false
                                --print("2 gradientOffset:", gradientOffset.Y, "gaspercentagetext:", gaspercentagetext)
                            end
                            refill_count = 0
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    Tab:AddToggle({
        Name = "Auto Reload Blades",
        Default = autorel,
        Callback = function(state)
            autorel = state
            settings.AutoReload = state
            saveSettings(settings)
            if autorel and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    while autorel do task.wait(1)
                        pcall(function()
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    
                            if gradientOffset.X == 0 and bladeSetsText ~= "0 / 3" and not humanoid.PlatformStand then
                                --print("Reloading", gradientOffset.X, bladeSetsText)

                                vim:SendKeyEvent(true, Enum.KeyCode.R, false, game)

                                for i = 1,50 do

                                    while humanoid.PlatformStand == true do
                                        task.wait()
                                    end

                                    -- //TP ABOVE TITAN WHILE RELOAD\\

                                    moveTo(character, titan.Head.Position + Vector3.new(0, 300, 0))
                                    task.wait(.1)

                                end
                                --print("Finished Reloading", gradientOffset.X, bladeSetsText)                               
                            end
                        end)
                    end
                end)
            end
        end
    })

    Tab:AddToggle({
        Name = "Auto Escape Grab",
        Default = escape,
        Callback = function(state)
            escape = state
            settings.Escape = state
            saveSettings(settings)
            if escape and not damagefarm then
                task.spawn(function()
                    while escape do task.wait(math.random(0.1, 0.7))
                        pcall(function()
                            local buttons = player.PlayerGui.Interface.Buttons
                            for i, v in pairs(buttons:GetChildren()) do
                                if v:IsA("CanvasGroup") and not sigmaskibidi then
                                    local skibidi = v.Name
                                    vim:SendKeyEvent(true, Enum.KeyCode[skibidi], false, game)
                                    wait(.1)
                                    vim:SendKeyEvent(false, Enum.KeyCode[skibidi], false, game)
                                    wait(.1)
                                end
                            end
                        end)
                    end
                end)
            end
        end
    })

    Tab5:AddToggle({
        Name = "Autofarm Raid",
        Default = autofarmraid,
        Callback = function(state)
            autofarmraid = state
            settings.AutoFarmRaid = state
            saveSettings(settings)
            if autofarmraid and game.PlaceId == 14012874501 and not damagefarm and Workspace:GetAttribute("Type") == "Raids" then
                task.spawn(function()
                    local roar = false
                    oldKillCount = 0
                    local TP_Count = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()

                    local function getAnimationTrack()
                        local tracks = workspace.Titans.Attack_Titan.Fake.Controller.Animator:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://17395738065" then
                                return track
                            end
                        end
                        return nil
                    end

                    -- // CHECK WHEN EREN ROARS TO TP ABOVE TO NOT GET HIT \\
                    local function RoarCheck()
                        while autofarmraid do task.wait()

                            while skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp do
                                task.wait()
                            end

                            if workspace.Titans:FindFirstChild("Attack_Titan") and player.PlayerGui.Interface.HUD.Visible then
                                local currentTitanHead = workspace.Titans.Attack_Titan:FindFirstChild("Head") or workspace.Titans.Attack_Titan:GetPivot()

                                local finishedPlaying = false
                                local animationTrack = getAnimationTrack()

                                if animationTrack then
                                    local function checkAnimationTrack()
                                        while animationTrack and animationTrack.IsPlaying do task.wait(.1)
                                            roar = true
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            while not player.PlayerGui.Interface.HUD.Visible or skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp or humanoid.PlatformStand do
                                                task.wait()
                                                roar = false
                                            end
                                            if not animationTrack.IsPlaying then
                                                finishedPlaying = true
                                                roar = false
                                            end
                                        end
                                    end
                                    task.spawn(checkAnimationTrack)
                                end
                            end
                        end
                    end

                    -- //AUTO USE GAS\\
                    local function AutoUseGas()
                        while autofarmraid do task.wait()
                            if not skibidirefill and foundtitanyes then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    -- //M1 CHECK\\
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmraid do task.wait()
                            if skibidirefill or player.PlayerGui.Interface.Chests.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmraid do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                humanoid.Health = 0
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(RoarCheck)
                    task.spawn(autoresetnoblades_orrefills)

                    -- //START OF AUTO FARM\\
                    while autofarmraid do task.wait()
                        foundtitanyes = false
                        local success, err = pcall(function()

                            while player.PlayerGui.Interface.HUD.Visible == false do
                                task.wait()
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") then
                                        for _, v in pairs(workspace.Climbable.Buildings:GetChildren()) do
                                            if v.Name ~= "Trost_House6" then
                                                v:Destroy()
                                            end
                                        end
                                    end
                                end)
                            end)

                            -- //REMOVE SHIGANSHINA WALLS\\ 
                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                        game.Workspace.Climbable.Walls:Destroy()
                                    end
                                end)
                            end)

                            -- //GET CLOSEST TITAN TO ROCK OR EREN\\
                            local a = workspace.Unclimbable:FindFirstChild("Objective")
                            local b = a:FindFirstChild("Defend_Eren")
                            local c
                            local objectivePart
                            if b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("Attack_Titan")
                                objectivePart = c:FindFirstChild("HumanoidRootPart")
                            elseif not b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("BigRock")
                                objectivePart = c
                            end

                            local closestTitan = nil
                            local closestDistance = math.huge

                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
                                    local titanPosition = titan.Head.Position
                                    local objectivePosition = objectivePart.Position
                                    local distance = (titanPosition - objectivePosition).magnitude
                            
                                    if titan.Name == "Attack_Titan" then
                                        closestTitan = titan
                                        break
                                    elseif distance < closestDistance then
                                        closestDistance = distance
                                        closestTitan = titan
                                    end
                                end
                            end

                            if closestTitan then
                                foundtitanyes = true
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                    titanStartTime = os.clock()
                                end

                                function Store_Original_Hitbox(closestTitan)
                                    local properties = {}

                                    if closestTitan.Name == "Attack_Titan" then
                                        local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                        for _, hitboxname in ipairs(hitboxnames) do
                                            local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                            if hitbox then
                                                local size = hitbox.Size
                                                if size ~= Vector3.new(300, 300, 300) then
                                                    properties[hitboxname] = {
                                                        Size = size,
                                                        Anchored = hitbox.Anchored,
                                                        CanCollide = hitbox.CanCollide
                                                    }
                                                end
                                            end
                                        end
                                    end

                                    return properties
                                end

                                local storedProperties = Store_Original_Hitbox(closestTitan)

                                function restoreProperties(closestTitan, properties)
                                    if closestTitan.Name == "Attack_Titan" then
                                        local marker = closestTitan:WaitForChild("Marker")
                                        local currentAdornee = marker.Adornee

                                        marker:GetPropertyChangedSignal("Adornee"):Connect(function()
                                            if marker.Adornee ~= currentAdornee then
                                                currentAdornee = marker.Adornee

                                                local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                                for _, hitboxname in ipairs(hitboxnames) do
                                                    local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                                    if hitbox and properties[hitboxname] then
                                                        hitbox.Size = properties[hitboxname].Size
                                                        hitbox.Anchored = properties[hitboxname].Anchored
                                                        hitbox.CanCollide = properties[hitboxname].CanCollide
                                                    end
                                                end
                                            end
                                        end)
                                    end
                                end

                                local function Expand_Hitbox(closestTitan)
                                    local napeObject

                                    if closestTitan.Name == "Attack_Titan" and closestTitan.Hitboxes:FindFirstChild("Hit") then
                                        local hitboxname = tostring(closestTitan.Marker.Adornee)
                                        for _, hitbox in ipairs(closestTitan.Hitboxes.Hit:GetChildren()) do
                                            if hitbox.Name == hitboxname then
                                                napeObject = hitbox
                                                break
                                            end
                                        end
                                    elseif closestTitan.Name ~= "Attack_Titan" then
                                        napeObject = closestTitan.Hitboxes.Hit.Nape
                                    end

                                    if napeObject then
                                        napeObject.Size = Vector3.new(300, 300, 300)
                                        napeObject.CanCollide = false
                                        napeObject.Anchored = false
                                    end
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()

                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()

                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)

                                    Store_Original_Hitbox(closestTitan)

                                    Expand_Hitbox(closestTitan)

                                        -- Refill Section
                                        while bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand do task.wait()

                                            bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                            gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                            gaspercentageNumber = stringToNumber(gaspercentagetext)
                                            gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                            while skibidirefill do task.wait()
                                                --print("skibidirefill status:", skibidirefill)
                                                if not moveInProgress and not moveCancelled and not sigmarefill then
                                                    --print("skibidirefill status:", skibidirefill, "moveCancelled Status:", moveCancelled)
                                                    moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))--, 1)
                                                end
                                            end

                                            if not moveInProgress and not moveCancelled and not sigmarefill then
                                                --print("bladeSetsText status:", bladeSetsText, "moveCancelled Status:", moveCancelled)
                                                moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))--, 1)
                                            elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                                break
                                            end

                                            --print("bladeSetsText status:", bladeSetsText, "2")
                                            if bladeSetsText == "3 / 3" or not autofarmraid or gaspercentageNumber > 95 then
                                                break
                                            end
                                        end

                                    -- //Teleport to Titan\\
                                    local distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude
                                    if not notfirsttp or not notsecondtp then
                                        if distance < 800 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        if distance > 1200 then
                                            notfirsttp = true
                                            --moveTo(character, humanoidRootPart.Position + Vector3.new(0, 75, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        if distance < 2000 then
                                            notfirsttp = true
                                            --moveTo(character, humanoidRootPart.Position + Vector3.new(0, 75, 0))
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude

                                        if not notsecondtp and distance > 700 then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                            notsecondtp = true
                                        elseif distance < 700 and not notsecondtp then
                                            notsecondtp = true
                                        end

                                        -- \\Attack Titan//
                                    elseif notfirsttp and notsecondtp and not roar then
                                        --print("roar chest status 3:", roar)
                                        local tp_time = os.clock() + 0.5
                                        while os.clock() < tp_time do task.wait()
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            if not currentTitan:FindFirstChild("Head") then
                                                break
                                            end
                                        end
                                        clickCenterScreen()
                                        clickCenterScreen()
                                        fastmoveto(character, currentTitanHead.Position + Vector3.new(0, distancey, 0))
                                        TP_Count = TP_Count + 1
                                        if TP_Count == 3 then
                                            restoreProperties(closestTitan, storedProperties)
                                            Expand_Hitbox(closestTitan)
                                            TP_Count = 0
                                        end
                                    end

                                    -- Check if refill
                                    if bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand then
                                        break
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        moveCancelled = true
                                        break
                                    end

                                until moveCancelled and not skibidirefill or (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and autotp or not autofarmraid or not currentTitan:FindFirstChild("Humanoid") or not currentTitan:FindFirstChild("Head") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand

                                -- TIMEOUT LOOP
                                if moveCancelled and not humanoid.PlatformStand then
                                    local cancelStartTime = os.clock()
                                    repeat task.wait()
                                        moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                    until os.clock() - cancelStartTime >= 2
                                end
                            end

                            -- Health recovery loop
                            if (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
                                repeat task.wait(5)
                                until (humanoid.Health / humanoid.MaxHealth) * 100 >= healthstop or not autofarmraid or not autotp
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    Tab5:AddToggle({
        Name = "Autofarm Raid ALT",
        Default = autofarmraidalt,
        Callback = function(state)
            autofarmraidalt = state
            settings.AutoFarmRaidAlt = state
            saveSettings(settings)
            if autofarmraidalt and game.PlaceId == 14012874501 and not autofarmraid and not damagefarm and Workspace:GetAttribute("Type") == "Raids" then
                task.spawn(function()
                    oldKillCount = 0
                    local TP_Count = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()

                    -- //AUTO USE GAS\\
                    local function AutoUseGas()
                        while autofarmraidalt do task.wait()
                            if not skibidirefill and foundtitanyes then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    local function getAnimationTrack()
                        local tracks = workspace.Titans.Attack_Titan.Fake.Controller.Animator:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://17395738065" then
                                return track
                            end
                        end
                        return nil
                    end

                    -- // CHECK WHEN EREN ROARS TO TP ABOVE TO NOT GET HIT \\
                    local function RoarCheck()
                        while autofarmraidalt do task.wait()
                            while skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp do
                                task.wait()
                            end

                            if workspace.Titans:FindFirstChild("Attack_Titan") and player.PlayerGui.Interface.HUD.Visible then
                                local currentTitanHead = workspace.Titans.Attack_Titan:FindFirstChild("Head") or workspace.Titans.Attack_Titan:GetPivot()

                                local finishedPlaying = false
                                local animationTrack = getAnimationTrack()

                                if animationTrack then
                                    local function checkAnimationTrack()
                                        while animationTrack and animationTrack.IsPlaying do task.wait(0.1)
                                            roar = true
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            while not player.PlayerGui.Interface.HUD.Visible or skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp or humanoid.PlatformStand do
                                                task.wait()
                                                roar = false
                                            end
                                            if not animationTrack.IsPlaying then
                                                finishedPlaying = true
                                                roar = false
                                            end
                                        end
                                    end
                                    task.spawn(checkAnimationTrack)
                                end
                            end
                        end
                    end

                    -- //M1 CHECK\\
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmraidalt do task.wait()
                            if skibidirefill or player.PlayerGui.Interface.Chests.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmraidalt do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                humanoid.Health = 0
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(RoarCheck)
                    task.spawn(autoresetnoblades_orrefills)

                    -- //START OF AUTO FARM\\
                    while autofarmraidalt do task.wait()
                        foundtitanyes = false
                        local success, err = pcall(function()
                            while player.PlayerGui.Interface.HUD.Visible == false do
                                task.wait()
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") then
                                        for _, v in pairs(workspace.Climbable.Buildings:GetChildren()) do
                                            if v.Name ~= "Trost_House6" then
                                                v:Destroy()
                                            end
                                        end
                                    end
                                end)
                            end)

                            -- //REMOVE SHIGANSHINA WALLS\\ 
                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                        game.Workspace.Climbable.Walls:Destroy()
                                    end
                                end)
                            end)

                            -- //GET CLOSEST TITAN TO ROCK OR EREN\\
                            local a = workspace.Unclimbable:FindFirstChild("Objective")
                            local b = a:FindFirstChild("Defend_Eren")
                            local c
                            local objectivePart
                            if b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("Attack_Titan")
                                objectivePart = c:FindFirstChild("HumanoidRootPart")
                            elseif not b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("BigRock")
                                objectivePart = c
                            end

                            local closestTitan = nil
                            local secondClosestTitan = nil
                            local closestDistance = math.huge
                            local secondClosestDistance = math.huge

                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
                                    local titanPosition = titan.Head.Position
                                    local objectivePosition = objectivePart.Position
                                    local distance = (titanPosition - objectivePosition).magnitude

                                    if titan.Name == "Attack_Titan" then
                                        closestTitan = titan
                                        secondClosestTitan = titan
                                        break
                                    elseif distance < closestDistance then
                                        secondClosestDistance = closestDistance
                                        secondClosestTitan = closestTitan

                                        closestDistance = distance
                                        closestTitan = titan
                                    elseif distance < secondClosestDistance then
                                        secondClosestDistance = distance
                                        secondClosestTitan = titan
                                    end
                                end
                            end

                            if secondClosestTitan then
                                foundtitanyes = true
                                if currentTitan ~= secondClosestTitan then
                                    currentTitan = secondClosestTitan
                                    titanStartTime = os.clock()
                                end

                                function Store_Original_Hitbox(closestTitan)
                                    local properties = {}

                                    if closestTitan.Name == "Attack_Titan" then
                                        local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                        for _, hitboxname in ipairs(hitboxnames) do
                                            local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                            if hitbox then
                                                local size = hitbox.Size
                                                if size ~= Vector3.new(300, 300, 300) then
                                                    properties[hitboxname] = {
                                                        Size = size,
                                                        Anchored = hitbox.Anchored,
                                                        CanCollide = hitbox.CanCollide
                                                    }
                                                end
                                            end
                                        end
                                    end

                                    return properties
                                end

                                local storedProperties = Store_Original_Hitbox(closestTitan)

                                function restoreProperties(closestTitan, properties)
                                    if closestTitan.Name == "Attack_Titan" then
                                        local marker = closestTitan:WaitForChild("Marker")
                                        local currentAdornee = marker.Adornee

                                        marker:GetPropertyChangedSignal("Adornee"):Connect(function()
                                            if marker.Adornee ~= currentAdornee then
                                                currentAdornee = marker.Adornee

                                                local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                                for _, hitboxname in ipairs(hitboxnames) do
                                                    local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                                    if hitbox and properties[hitboxname] then
                                                        hitbox.Size = properties[hitboxname].Size
                                                        hitbox.Anchored = properties[hitboxname].Anchored
                                                        hitbox.CanCollide = properties[hitboxname].CanCollide
                                                    end
                                                end
                                            end
                                        end)
                                    end
                                end

                                local function Expand_Hitbox(closestTitan)
                                    local napeObject

                                    if closestTitan.Name == "Attack_Titan" and closestTitan.Hitboxes:FindFirstChild("Hit") then
                                        local hitboxname = tostring(closestTitan.Marker.Adornee)
                                        for _, hitbox in ipairs(closestTitan.Hitboxes.Hit:GetChildren()) do
                                            if hitbox.Name == hitboxname then
                                                napeObject = hitbox
                                                break
                                            end
                                        end
                                    elseif closestTitan.Name ~= "Attack_Titan" then
                                        napeObject = closestTitan.Hitboxes.Hit.Nape
                                    end

                                    if napeObject then
                                        napeObject.Size = Vector3.new(300, 300, 300)
                                        napeObject.CanCollide = false
                                        napeObject.Anchored = false
                                    end
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()

                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()

                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)

                                    Store_Original_Hitbox(closestTitan)

                                    Expand_Hitbox(closestTitan)

                                    -- Refill Section
                                    while bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand do task.wait()

                                        bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                        gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                        gaspercentageNumber = stringToNumber(gaspercentagetext)
                                        gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                        while skibidirefill do task.wait()
                                            --print("skibidirefill status:", skibidirefill)
                                            if not moveInProgress and not moveCancelled and not sigmarefill then
                                                --print("skibidirefill status:", skibidirefill, "moveCancelled Status:", moveCancelled)
                                                moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                            end
                                        end

                                        if not moveInProgress and not moveCancelled and not sigmarefill then
                                            --print("bladeSetsText status:", bladeSetsText, "moveCancelled Status:", moveCancelled)
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                        elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                            break
                                        end

                                        --print("bladeSetsText status:", bladeSetsText, "2")
                                        if bladeSetsText == "3 / 3" or not autofarmraidalt or gaspercentageNumber > 95 then
                                            break
                                        end
                                    end

                                    -- //Teleport to Titan\\
                                    local distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude
                                    if not notfirsttp or not notsecondtp then
                                        if distance < 800 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        if distance > 1200 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        if distance < 2000 then
                                            notfirsttp = true
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                        end

                                        distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude

                                        if not notsecondtp and distance > 700 then
                                            moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
                                            notsecondtp = true
                                        elseif distance < 700 and not notsecondtp then
                                            notsecondtp = true
                                        end

                                        -- \\Attack Titan//
                                    elseif notfirsttp and notsecondtp then
                                        local tp_time = os.clock() + 0.5
                                        while os.clock() < tp_time do task.wait()
                                            fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
                                            if not currentTitan:FindFirstChild("Head") then
                                                break
                                            end
                                        end
                                        clickCenterScreen()
                                        clickCenterScreen()
                                        fastmoveto(character, currentTitanHead.Position + Vector3.new(0, distancey, 0))
                                        TP_Count = TP_Count + 1
                                        if TP_Count == 3 then
                                            restoreProperties(closestTitan, storedProperties)
                                            Expand_Hitbox(closestTitan)
                                            TP_Count = 0
                                        end
                                    end

                                    -- Check if refill
                                    if bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand then
                                        break
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        moveCancelled = true
                                        break
                                    end

                                until moveCancelled and not skibidirefill or (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and autotp or not autofarmraidalt or not currentTitan:FindFirstChild("Humanoid") or not currentTitan:FindFirstChild("Head") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand

                                -- TIMEOUT LOOP
                                if moveCancelled and not humanoid.PlatformStand then
                                    local cancelStartTime = os.clock()
                                    repeat task.wait()
                                        moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
                                    until os.clock() - cancelStartTime >= 2
                                end
                            end

                            -- Health recovery loop
                            if (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
                                repeat task.wait(5)
                                until (humanoid.Health / humanoid.MaxHealth) * 100 >= healthstop or not autofarmraidalt or not autotp
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    -- Tab5:AddToggle({
    --     Name = "Autofarm Streak (Raid)",
    --     Default = autofarmraidstreak,
    --     Callback = function(state)
    --         autofarmraidstreak = state
    --         settings.AutoFarmRaidStreak = state
    --         saveSettings(settings)
    --         if autofarmraidstreak and game.PlaceId == 14012874501 and not damagefarm and Workspace:GetAttribute("Type") == "Raids" then
    --             task.spawn(function()
    --                 local roar = false
    --                 oldKillCount = 0
    --                 local TP_Count = 0
    --                 local currentTitan = nil
    --                 local titanStartTime = os.clock()

    --                 local function getAnimationTrack()
    --                     local tracks = workspace.Titans.Attack_Titan.Fake.Controller.Animator:GetPlayingAnimationTracks()
    --                     for _, track in ipairs(tracks) do
    --                         if track.Animation.AnimationId == "rbxassetid://17395738065" then
    --                             return track
    --                         end
    --                     end
    --                     return nil
    --                 end

    --                 -- // CHECK WHEN EREN ROARS TO TP ABOVE TO NOT GET HIT \\
    --                 local function RoarCheck()
    --                     while autofarmraidstreak do task.wait()

    --                         while skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp do
    --                             task.wait()
    --                         end

    --                         if workspace.Titans:FindFirstChild("Attack_Titan") and player.PlayerGui.Interface.HUD.Visible then
    --                             local currentTitanHead = workspace.Titans.Attack_Titan:FindFirstChild("Head") or workspace.Titans.Attack_Titan:GetPivot()

    --                             local finishedPlaying = false
    --                             local animationTrack = getAnimationTrack()

    --                             if animationTrack then
    --                                 local function checkAnimationTrack()
    --                                     while animationTrack and animationTrack.IsPlaying do task.wait(.1)
    --                                         roar = true
    --                                         fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
    --                                         while not player.PlayerGui.Interface.HUD.Visible or skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp or humanoid.PlatformStand do
    --                                             task.wait()
    --                                             roar = false
    --                                         end
    --                                         if not animationTrack.IsPlaying then
    --                                             finishedPlaying = true
    --                                             roar = false
    --                                         end
    --                                     end
    --                                 end
    --                                 task.spawn(checkAnimationTrack)
    --                             end
    --                         end
    --                     end
    --                 end

    --                 -- //AUTO USE GAS\\
    --                 local function AutoUseGas()
    --                     while autofarmraidstreak do task.wait()
    --                         if not skibidirefill and foundtitanyes then
    --                             vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
    --                             task.wait(4)
    --                         end
    --                     end
    --                 end

    --                 -- //M1 CHECK\\
    --                 local function M1Check()
    --                     local attacktimer = os.clock()
    --                     local animationIds = {
    --                         "rbxassetid://14518641514", "rbxassetid://14518654101",
    --                         "rbxassetid://14518651360", "rbxassetid://14518648320"
    --                     }
    --                     while autofarmraidstreak do task.wait()
    --                         if skibidirefill or player.PlayerGui.Interface.Chests.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
    --                             attacktimer = os.clock()
    --                         end
    --                         local tracks = humanoid:GetPlayingAnimationTracks()
    --                         for _, track in ipairs(tracks) do
    --                             if table.find(animationIds, track.Animation.AnimationId) then
    --                                 attacktimer = os.clock()
    --                                 break
    --                             end
    --                         end
    --                         if os.clock() - attacktimer >= 30 then
    --                             humanoid.Health = 0
    --                             break
    --                         end
    --                     end
    --                 end

    --                 local function autoresetnoblades_orrefills()
    --                     while autofarmraidstreak do task.wait()
    --                         local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                         local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
    --                         if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
    --                             humanoid.Health = 0
    --                         end
    --                     end
    --                 end

    --                 task.spawn(AutoUseGas)
    --                 task.spawn(M1Check)
    --                 task.spawn(RoarCheck)
    --                 task.spawn(autoresetnoblades_orrefills)

    --                 -- //START OF AUTO FARM\\
    --                 while autofarmraidstreak do task.wait()
    --                     foundtitanyes = false
    --                     local success, err = pcall(function()

    --                         while player.PlayerGui.Interface.HUD.Visible == false do
    --                             task.wait()
    --                         end

    --                         while player:GetAttribute("Cutscene") == true do
    --                             task.wait()
    --                         end

    --                         task.spawn(function()
    --                             pcall(function()
    --                                 task.wait(.5)
    --                                 if workspace:FindFirstChild("Climbable") then
    --                                     for _, v in pairs(workspace.Climbable.Buildings:GetChildren()) do
    --                                         if v.Name ~= "Trost_House6" then
    --                                             v:Destroy()
    --                                         end
    --                                     end
    --                                 end
    --                             end)
    --                         end)

    --                         -- //REMOVE SHIGANSHINA WALLS\\ 
    --                         task.spawn(function()
    --                             pcall(function()
    --                                 task.wait(.5)
    --                                 if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
    --                                     game.Workspace.Climbable.Walls:Destroy()
    --                                 end
    --                             end)
    --                         end)

    --                         -- //GET CLOSEST TITAN TO ROCK OR EREN\\
    --                         local a = workspace.Unclimbable:FindFirstChild("Objective")
    --                         local b = a:FindFirstChild("Defend_Eren")
    --                         local c
    --                         local objectivePart
    --                         if b:FindFirstChild("Attack_Titan") then
    --                             c = b:FindFirstChild("Attack_Titan")
    --                             objectivePart = c:FindFirstChild("HumanoidRootPart")
    --                         elseif not b:FindFirstChild("Attack_Titan") then
    --                             c = b:FindFirstChild("BigRock")
    --                             objectivePart = c
    --                         end

    --                         local closestTitan = nil
    --                         local closestDistance = math.huge

    --                         for _, titan in pairs(workspace.Titans:GetChildren()) do
    --                             if titan:IsA("Model") and titan.Name ~= "Attack_Titan" and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
    --                                 local titanPosition = titan.Head.Position
    --                                 local objectivePosition = objectivePart.Position
    --                                 local distance = (titanPosition - objectivePosition).magnitude

    --                                 if distance < closestDistance then
    --                                     closestDistance = distance
    --                                     closestTitan = titan
    --                                 end
    --                             end
    --                         end

    --                         if closestTitan then
    --                             foundtitanyes = true
    --                             if currentTitan ~= closestTitan then
    --                                 currentTitan = closestTitan
    --                                 titanStartTime = os.clock()
    --                             end

    --                             local nape = currentTitan.Hitboxes.Hit.Nape
    --                             local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()

    --                             local startTime = os.clock()
    --                             local moveCancelled = false
    --                             local notfirsttp = false
    --                             local notsecondtp = false

    --                             repeat task.wait()

    --                                 local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                                 local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
    --                                 -- gas variables
    --                                 local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
    --                                 local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
    --                                 local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
    --                                 local gaspercentageNumber = stringToNumber(gaspercentagetext)

    --                                 nape.Size, nape.CanCollide, nape.Anchored = Vector3.new(300, 300, 300), false, false

    --                                 -- Refill Section
    --                                 while bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand do task.wait()

    --                                     bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                                     gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
    --                                     gaspercentageNumber = stringToNumber(gaspercentagetext)
    --                                     gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

    --                                     while skibidirefill do task.wait()
    --                                         --print("skibidirefill status:", skibidirefill)
    --                                         if not moveInProgress and not moveCancelled and not sigmarefill then
    --                                             --print("skibidirefill status:", skibidirefill, "moveCancelled Status:", moveCancelled)
    --                                             moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))--, 1)
    --                                         end
    --                                     end

    --                                     if not moveInProgress and not moveCancelled and not sigmarefill then
    --                                         --print("bladeSetsText status:", bladeSetsText, "moveCancelled Status:", moveCancelled)
    --                                         moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))--, 1)
    --                                     elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
    --                                         break
    --                                     end

    --                                     --print("bladeSetsText status:", bladeSetsText, "2")
    --                                     if bladeSetsText == "3 / 3" or not autofarmraidstreak or gaspercentageNumber > 95 then
    --                                         break
    --                                     end
    --                                 end

    --                                 -- //Teleport to Titan\\
    --                                 local distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude
    --                                 if not notfirsttp or not notsecondtp then
    --                                     if distance < 800 then
    --                                         notfirsttp = true
    --                                         moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
    --                                     end

    --                                     if distance > 1200 then
    --                                         notfirsttp = true
    --                                         --moveTo(character, humanoidRootPart.Position + Vector3.new(0, 75, 0))
    --                                         moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
    --                                     end

    --                                     if distance < 2000 then
    --                                         notfirsttp = true
    --                                         --moveTo(character, humanoidRootPart.Position + Vector3.new(0, 75, 0))
    --                                         moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
    --                                     end

    --                                     distance = (humanoidRootPart.Position - currentTitanHead.Position).magnitude

    --                                     if not notsecondtp and distance > 700 then
    --                                         moveTo(character, currentTitanHead.Position + Vector3.new(0, 130, 0))
    --                                         notsecondtp = true
    --                                     elseif distance < 700 and not notsecondtp then
    --                                         notsecondtp = true
    --                                     end

    --                                     -- \\Attack Titan//
    --                                 elseif notfirsttp and notsecondtp and not roar then
    --                                     --print("roar chest status 3:", roar)
    --                                     local tp_time = os.clock() + 0.5
    --                                     while os.clock() < tp_time do task.wait()
    --                                         fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 400, 0))
    --                                         if not currentTitan:FindFirstChild("Head") then
    --                                             break
    --                                         end
    --                                     end
    --                                     clickCenterScreen()
    --                                     fastmoveto(character, currentTitanHead.Position + Vector3.new(0, distancey, 0))
    --                                 end

    --                                 -- Check if refill
    --                                 if bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand then
    --                                     break
    --                                 end

    --                                 -- Time Out after 15 seconds
    --                                 if os.clock() - startTime >= 15 then
    --                                     moveCancelled = true
    --                                     break
    --                                 end

    --                             until moveCancelled and not skibidirefill or (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and autotp or not autofarmraidstreak or not currentTitan:FindFirstChild("Humanoid") or not currentTitan:FindFirstChild("Head") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand

    --                             -- TIMEOUT LOOP
    --                             if moveCancelled and not humanoid.PlatformStand then
    --                                 local cancelStartTime = os.clock()
    --                                 repeat task.wait()
    --                                     moveTo(character, currentTitanHead.Position + Vector3.new(0, 300, 0))
    --                                 until os.clock() - cancelStartTime >= 2
    --                             end
    --                         end

    --                         -- Health recovery loop
    --                         if (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
    --                             repeat task.wait(5)
    --                             until (humanoid.Health / humanoid.MaxHealth) * 100 >= healthstop or not autofarmraidstreak or not autotp
    --                         end
    --                     end)
    --                     if not success then warn(err) end
    --                 end
    --             end)
    --         end
    --     end
    -- })

    Tab5:AddToggle({
        Name = "Auto Open Raid Chests",
        Default = raidchest,
        Callback = function(state)
            raidchest = state
            settings.RaidChest = state
            saveSettings(settings)
            if raidchest and game.PlaceId == 14012874501 then
                local loopcount = 0
                task.spawn(function()
                    local success, err = pcall(function()

                        local Chests = player.PlayerGui.Interface.Chests
                        while raidchest do task.wait()
                            if Chests.Visible then
                                for _, yOffset in ipairs(yOffsetValues) do
                                    clickButton(Chests.Premium, yOffset)
                                    task.wait(.1)
                                end

                                for _, yOffset in ipairs(yOffsetValues) do
                                    clickButton(Chests.Free, yOffset)
                                    task.wait(.1)
                                end
                                loopcount = loopcount + 1
                                Chests = player.PlayerGui.Interface.Chests

                                if not Chests.Free.Visible and Chests.Finish.Visible then
                                    for _, yOffset in ipairs(yOffsetValues) do
                                        clickButton(Chests.Finish, yOffset)
                                        task.wait(0.1)
                                    end
                                    loopcount = 0
                                elseif not Chests.Free.Visible and not Chests.Finish.Visible or not Chests.Premium.Visible and not Chests.Finish.Visible then
                                    loopcount = 0
                                    while not Chests.Free.Visible and not Chests.Finish.Visible do
                                        task.wait(.1)
                                        Chests = player.PlayerGui.Interface.Chests
                                        loopcount = loopcount + 1
                                        if loopcount >= 100 then
                                            break
                                        end
                                        if Chests.Free.Visible and Chests.Finish.Visible or Chests.Finish.Visible and Chests.Premium.Visible then
                                            loopcount = 0
                                        end
                                    end
                                end
                            end
                        end
                    end)
                    if not success then warn(err) end
                end)
            end
        end
    })

    Tab5:AddToggle({
        Name = "Auto Open Free Raid Chest Only",
        Default = raidchestfree,
        Callback = function(state)
            raidchestfree = state
            settings.RaidChestFree = state
            saveSettings(settings)
            if raidchestfree and game.PlaceId == 14012874501 then
                local loopcount = 0
                task.spawn(function()
                    local success, err = pcall(function()

                        local Chests = player.PlayerGui.Interface.Chests
                        while raidchestfree do task.wait()
                            if Chests.Visible then

                                for _, yOffset in ipairs(yOffsetValues) do
                                    clickButton(Chests.Free, yOffset)
                                    task.wait(.1)
                                end
                                loopcount = loopcount + 1
                                Chests = player.PlayerGui.Interface.Chests

                                if not Chests.Free.Visible and Chests.Finish.Visible then
                                    for _, yOffset in ipairs(yOffsetValues) do
                                        clickButton(Chests.Finish, yOffset)
                                        task.wait(.1)
                                    end
                                    loopcount = 0
                                elseif not Chests.Free.Visible and not Chests.Finish.Visible then
                                    loopcount = 0
                                    while not Chests.Free.Visible and not Chests.Finish.Visible do task.wait(.1)
                                        Chests = player.PlayerGui.Interface.Chests
                                        loopcount = loopcount + 1
                                        if loopcount >= 100 then
                                            break
                                        end
                                        if Chests.Free.Visible and Chests.Finish.Visible or Chests.Finish.Visible and Chests.Premium.Visible then
                                            loopcount = 0
                                        end
                                    end
                                end
                            end
                        end
                    end)
                    if not success then warn(err) end
                end)
            end
        end
    })

    onikirifound = false

    Tab5:AddToggle({
        Name = "Auto Reset if no onikiri eren",
        Default = resetnoonikiri,
        Callback = function(state)
            resetnoonikiri = state
            settings.ResetNoOnikiri = state
            saveSettings(settings)
            if resetnoonikiri and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and workspace:GetAttribute("Type") == "Raids" and not onikirifound then
                task.spawn(function()
                    while resetnoonikiri and not onikirifound do task.wait(1)
                        pcall(function()
                            if workspace.Unclimbable.Objective.Defend_Eren.Attack_Titan:FindFirstChild("Fake") then
                                if not workspace.Unclimbable.Objective.Defend_Eren.Attack_Titan.Fake:FindFirstChild("LLL_Spike_3") and not onikirifound then
                                    print("resetting, no onikiri found phase 1")
                                    humanoid.Health = 0
                                else
                                    print("onikiri found phase 1")
                                    onikirifound = true
                                    while task.wait() do end
                                    while onikirifound do
                                        task.wait()
                                    end
                                    task.wait(999999)
                                end
                            elseif workspace.Titans.Attack_Titan:FindFirstChild("Fake") and not onikirifound then
                                if not workspace.Titans.Attack_Titan.Fake:FindFirstChild("Horns") and not onikirifound then
                                    print("resetting, no onikiri found phase 2")
                                    humanoid.Health = 0
                                else
                                    print("onikiri found phase 2")
                                    onikirifound = true
                                    while task.wait() do end
                                    while onikirifound do
                                        task.wait()
                                    end
                                    task.wait(999999)
                                end
                            end
                        end)
                    end
                end)
            end
        end
    })

    Tab2:AddSlider({
        Name = "Spam Key 1 Health Percentage",
        Min = 0,
        Max = 100,
        Default = settings.SpamKey1Health,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "%",
        Callback = function(Value)
            settings.SpamKey1Health = Value
            saveSettings(settings)
        end    
    })

    Tab2:AddSlider({
        Name = "Spam Key 2 Health Percentage",
        Min = 0,
        Max = 100,
        Default = settings.SpamKey2Health,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "%",
        Callback = function(Value)
            settings.SpamKey2Health = Value
            saveSettings(settings)
        end    
    })

    Tab2:AddSlider({
        Name = "Spam Key 3 Health Percentage",
        Min = 0,
        Max = 100,
        Default = settings.SpamKey3Health,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "%",
        Callback = function(Value)
            settings.SpamKey3Health = Value
            saveSettings(settings)
        end    
    })

    Tab2:AddSlider({
        Name = "Spam Key 4 Health Percentage",
        Min = 0,
        Max = 100,
        Default = settings.SpamKey4Health,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "%",
        Callback = function(Value)
            settings.SpamKey4Health = Value
            saveSettings(settings)
        end    
    })

    Tab2:AddSlider({
        Name = "Spam Key 5 Health Percentage",
        Min = 0,
        Max = 100,
        Default = settings.SpamKey5Health,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "%",
        Callback = function(Value)
            settings.SpamKey5Health = Value
            saveSettings(settings)
        end    
    })

    local function getHealthPercentage()
        if character and humanoid then
            return (humanoid.Health / humanoid.MaxHealth) * 100
        end
        return 100
    end

    Tab2:AddToggle({
        Name = "Spam Key 1",
        Default = spamkey1,
        Callback = function(state)
            spamkey1 = state
            settings.SpamKey1 = state
            saveSettings(settings)
            if spamkey1 then
                task.spawn(function()
                    while spamkey1 do task.wait()
                        local healthPercentage = getHealthPercentage()
                        if healthPercentage <= settings.SpamKey1Health then
                            pcall(function()
                                vim:SendKeyEvent(true, Enum.KeyCode.One, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.One, false, game)
                                task.wait(math.random(1,3))
                            end)
                        end
                    end
                end)
            end
        end
    })

    Tab2:AddToggle({
        Name = "Spam Key 2",
        Default = spamkey2,
        Callback = function(state)
            spamkey2 = state
            settings.SpamKey2 = state
            saveSettings(settings)
            if spamkey2 then
                task.spawn(function()
                    while spamkey2 do task.wait()
                        local healthPercentage = getHealthPercentage()
                        if healthPercentage <= settings.SpamKey2Health then
                            pcall(function()
                                vim:SendKeyEvent(true, Enum.KeyCode.Two, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Two, false, game)
                                task.wait(math.random(1,3))
                            end)
                        end
                    end
                end)
            end
        end
    })

    Tab2:AddToggle({
        Name = "Spam Key 3",
        Default = spamkey3,
        Callback = function(state)
            spamkey3 = state
            settings.SpamKey3 = state
            saveSettings(settings)
            if spamkey3 then
                task.spawn(function()
                    while spamkey3 do task.wait()
                        local healthPercentage = getHealthPercentage()
                        if healthPercentage <= settings.SpamKey3Health then
                            pcall(function()
                                vim:SendKeyEvent(true, Enum.KeyCode.Three, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Three, false, game)
                                task.wait(math.random(1,3))
                            end)
                        end
                    end
                end)
            end
        end
    })

    Tab2:AddToggle({
        Name = "Spam Key 4",
        Default = spamkey4,
        Callback = function(state)
            spamkey4 = state
            settings.SpamKey4 = state
            saveSettings(settings)
            if spamkey4 then
                task.spawn(function()
                    while spamkey4 do task.wait()
                        local healthPercentage = getHealthPercentage()
                        if healthPercentage <= settings.SpamKey4Health then
                            pcall(function()
                                vim:SendKeyEvent(true, Enum.KeyCode.Four, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Four, false, game)
                                task.wait(math.random(1,3))
                            end)
                        end
                    end
                end)
            end
        end
    })

    Tab2:AddToggle({
        Name = "Spam Key 5",
        Default = spamkey5,
        Callback = function(state)
            spamkey5 = state
            settings.SpamKey5 = state
            saveSettings(settings)
            if spamkey5 then
                task.spawn(function()
                    while spamkey5 do task.wait()
                        local healthPercentage = getHealthPercentage()
                        if healthPercentage <= settings.SpamKey5Health then
                            pcall(function()
                                vim:SendKeyEvent(true, Enum.KeyCode.Five, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Five, false, game)
                                task.wait(math.random(1,3))
                            end)
                        end
                    end
                end)
            end
        end
    })

    Tab3:AddToggle({
        Name = "Auto Rejoin if dc or kick",
        Default = autorejoin,
        Callback = function(state)
            autorejoin = state
            settings.AutoRejoin = state
            saveSettings(settings)
            if autorejoin then
                task.spawn(function()
                    local success, err = pcall(function()
                        local Http = cloneref(game:GetService("HttpService"))
                        local TPS = cloneref(game:GetService("TeleportService"))
                        cloneref(game:GetService("GuiService")).ErrorMessageChanged:Connect(function()
                            local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
                            if httprequest then
                                local servers = {}
                                local req = httprequest({
                                    Url = string.format(
                                        "https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true",
                                        13379208636
                                    )
                                })
                                local body = Http:JSONDecode(req.Body)

                                if body and body.data then
                                    for _, server in next, body.data do
                                        if type(server) == "table" and server.playing and server.maxPlayers and server.playing < server.maxPlayers and server.id ~= JobId then
                                            table.insert(servers, server.id)
                                        end
                                    end
                                end

                                if #servers > 0 then
                                    local targetServer = servers[math.random(1, #servers)]
                                    TPS:TeleportToPlaceInstance(13379208636, targetServer, player)
                                else
                                    sendNotification("Auto Rejoin", "No suitable servers found. Retrying...", 5)
                                end
                            else
                                sendNotification("Incompatible Exploit", "Your exploit does not support Auto Rejoin", 10)
                            end
                        end)
                    end)
                    if not success then warn(err) end
                end)
            end
        end
    })

    Tab3:AddToggle({
        Name = "Hide All Injuries",
        Default = spamkeyinj,
        Callback = function(state)
            spamkeyinj = state
            settings.SpamKeyinj = state
            saveSettings(settings)
            if spamkeyinj then
                task.spawn(function()
                    while spamkeyinj do task.wait()
                        pcall(function()
                            local injuriesFolder = character:FindFirstChild("Injuries")
                            if injuriesFolder then
                                for _, injury in pairs(injuriesFolder:GetChildren()) do
                                    injury:Destroy()
                                end
                            end
                        end)
                    end
                end)
            end
        end
    })

    Tab3:AddToggle({
        Name = "Auto Heal After Mission",
        Default = healinjury,
        Callback = function(state)
            healinjury = state
            settings.HealInjury = state
            saveSettings(settings)
            if healinjury and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()
                    local Interface = player.PlayerGui.Interface
                    local injuryview = Interface.Rewards.Main.Injuries
                    local Injuries = Interface.Injury
                    local loopcount = 0

                    -- //Click Heal Button to Open Injuries\\

                    while healinjury do task.wait()
                        local success, err = pcall(function()
                            if injuryview.Visible and Interface.Rewards.Visible and not Injuries.Visible then
                                healing = true
                                for _, yOffset in ipairs(yOffsetValues) do
                                    clickButton(injuryview.Heal, yOffset)
                                    task.wait(.2)
                                    if Injuries.Visible then
                                        break
                                    end
                                end
                            end

                            -- //Click Heal Injury\\

                            task.wait(3)
                            if Injuries.Visible then
                                for _, heal in pairs(Injuries.Main.Injuries:GetDescendants()) do
                                    while string.match(heal.Name, "Heal") and heal.Parent.Visible and not Injuries.Main.Injuries.Empty.Visible do
                                        for _, yOffset in ipairs(yOffsetValues) do
                                            clickButton(heal, yOffset)
                                            task.wait(.1)
                                        end
                                        loopcount = loopcount + 1
                                    end
                                end

                                -- //Close Injuries\\

                                if Injuries.Main.Injuries.Empty.Visible or loopcount == 12 then
                                    for _, yOffset in ipairs(yOffsetValues) do
                                        clickButton(Injuries.Injury_Close, yOffset)
                                        task.wait(.1)
                                    end
                                end
                                healing = false
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    local fpsboosterexecuted = false

    Tab3:AddSection({ Name = "Performance Enhancers"})

    Tab3:AddToggle({
        Name = "FPS Booster",
        Default = boostfps,
        Callback = function(state)
            boostfps = state
            settings.BoostFps = state
            saveSettings(settings)
            if boostfps then
                task.spawn(function()
                    while boostfps and not fpsboosterexecuted do task.wait(2)
                        local Lighting = game.Lighting
                        local userSettings = UserSettings():GetService("UserGameSettings")
                        userSettings.GraphicsQualityLevel = Enum.SavedQualitySetting.QualityLevel1

                        for _, part in pairs(workspace:GetDescendants()) do
                            if part:IsA("Part") or part:IsA("MeshPart") then
                                part.Material = Enum.Material.SmoothPlastic
                                part.Reflectance = 0
                                part.CastShadow = false
                            end
                        end

                        Lighting.GlobalShadows = false
                        Lighting.Outlines = false

                        Lighting.Brightness = 1
                        Lighting.TimeOfDay = "14:00:00"
                        Lighting.FogEnd = 100000
                        Lighting.FogStart = 100000
                        Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)

                        fpsboosterexecuted = true
                    end
                end)
            end
        end
    })

    Tab3:AddSection({ Name = "Disabling 3D Rendering makes ur screen go white"})

    Tab3:AddSection({ Name = "Doesn't effect autofarming"})

    local renderdisabled = false

    Tab3:AddToggle({
        Name = "Disable 3D Rendering",
        Default = disablerendering,
        Callback = function(state)
            disablerendering = state
            settings.DisableRendering = state
            saveSettings(settings)
            if disablerendering then
                task.spawn(function()
                    while disablerendering do task.wait(.5)
                        if not renderdisabled then
                            cloneref(game:GetService("RunService")):Set3dRenderingEnabled(false)
                            renderdisabled = true
                        end
                        if not disablerendering then
                            renderdisabled = false
                            cloneref(game:GetService("RunService")):Set3dRenderingEnabled(true)
                        end
                    end
                end)
            end
        end
    })

    Tab3:AddButton({
        Name = "DON'T CLICK",
        Callback = function()
        end
    })

    Tab3:AddButton({
        Name = "Reset Character",
        Callback = function()
            humanoid.Health = 0
        end
    })

    Tab3:AddToggle({
        Name = "Hide Name (Visual Only)",
        Default = semihidename,
        Save = true,
        Flag = "Hide_NameGUI",
        Callback = function(state)
            semihidename = state
            settings.SemiHidename = state
            saveSettings(settings)
            if semihidename then
                task.spawn(function()
                    while semihidename do task.wait()
                        pcall(function()
                            cloneref(game:GetService("CoreGui")).Orion:GetChildren()[2]:GetChildren()[4]:GetChildren()[6].TextLabel.Text = ".gg/dracohub"
                            for _, descendant in ipairs(player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players:GetDescendants()) do
                                if descendant:IsA("TextLabel") and descendant.Name == "Username" then
                                    descendant.Text = ".gg/dracohub"
                                end
                            end
                            for _, descendant in ipairs(player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players:GetDescendants()) do
                                if descendant:IsA("ImageLabel") then
                                    descendant.Image = ""
                                end
                            end
                        end)
                    end
                end)
            end
        end
    })

    Tab3:AddLabel("may cause lag depending on executor")

    Tab3:AddToggle({
        Name = "Hide Name (in everything (visual only))",
        Default = hidename,
        Save = true,
        Flag = "HideName",
        Callback = function(t)
            hidename = t
            settings.HideName = t
            saveSettings(settings)
            if hidename then
                task.spawn(function()
                    oldUserId = tostring(player.UserId)
                    oldName = player.Name
                    oldDisplayName = player.DisplayName
                    local function processtext(text)
                        if string.gsub(text,oldName,".gg/Dracohub") ~= text then
                            return string.gsub(text,oldName,".gg/Dracohub")
                        elseif string.gsub(text,oldUserId,13886182) ~= text then
                            return string.gsub(text,oldUserId,13886182)
                        elseif string.gsub(text,oldDisplayName,".gg/Dracohub") ~= text then
                            return string.gsub(text,oldDisplayName,".gg/Dracohub")
                        end
                        if text ~= nil then
                            return text
                        end
                        return ''
                    end

                    for i,v in next, game:GetDescendants() do
                        if v:IsA("TextBox") or v:IsA("TextLabel") or v:IsA("TextButton") then
                            v.Text = processtext(v.Text)
                            v.Name = processtext(v.Name)
                            v.Changed:Connect(function(property)
                                v.Text = processtext(v.Text)
                                v.Name = processtext(v.Name)
                            end)
                        end
                    end

                    while hidename do task.wait()
                        pcall(function()
                            cloneref(game:GetService("CoreGui")).Orion:GetChildren()[2]:GetChildren()[4]:GetChildren()[6].TextLabel.Text = ".gg/dracohub"
                            for _, descendant in ipairs(player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players:GetDescendants()) do
                                if descendant:IsA("TextLabel") and descendant.Name == "Username" then
                                    descendant.Text = ".gg/dracohub"
                                end
                            end
                            for _, descendant in ipairs(player.PlayerGui.Interface.Missions.Info.Main.Info.Main.Players:GetDescendants()) do
                                if descendant:IsA("ImageLabel") then
                                    descendant.Image = ""
                                end
                            end
                        end)
                    end
                end)
            end
        end
    })

    Tab4:AddSection({ Name = "Auto Farming Settings: " })

    Tab4:AddSlider({
        Name = "Health to TP AT (Percentage)",
        Min = 1,
        Max = 80,
        Default = healthtpat,
        Color = Color3.fromRGB(235, 127, 12), 
        Increment = 1,
        ValueName = "health",
        Callback = function(value)
            healthtpat = value
            settings.HealthToTPAt = value
            saveSettings(settings)
        end
    })

    Tab4:AddSlider({
        Name = "Wait Until Health is (Percentage)",
        Min = 60,
        Max = 100,
        Default = healthstop,
        Color = Color3.fromRGB(235, 127, 12), 
        Increment = 1,
        ValueName = "health",
        Callback = function(value)
            healthstop = value
            settings.HealthStop = value
            saveSettings(settings)
        end
    })

    Tab4:AddSlider({
        Name = "Reset Character Timer",
        Min = 10,
        Max = 1000,
        Default = resettimer,
        Color = Color3.fromRGB(235, 127, 12), 
        Increment = 10,
        ValueName = "Seconds",
        Callback = function(value)
            resettimer = value
            settings.ResetTimer = value
            saveSettings(settings)
        end
    })

    Tab4:AddSlider({
        Name = "Distance Slider",
        Min = 60,
        Max = 400,
        Default = distancey,
        Color = Color3.fromRGB(235, 127, 12), 
        Increment = 5,
        ValueName = "Distance Above",
        Callback = function(value)
            distancey = value
            settings.DistanceY = value
            saveSettings(settings)
        end
    })

    Tab4:AddToggle({
        Name = "Reset On Timer",
        Default = resetontimer,
        Callback = function(state)
            resetontimer = state
            settings.ResetOnTimer = state
            saveSettings(settings)
            if resetontimer and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    while resetontimer do task.wait()
                        pcall(function()
                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model")  and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and humanoid.PlatformStand == false then
                                    task.wait(resettimer)
                                    if titan:FindFirstChild("Humanoid") then
                                        sigmaskibidi = true
                                        repeat task.wait(.1)

                                            while humanoid.PlatformStand == true do
                                                task.wait()
                                            end

                                            humanoid.Health = 0
                                            --moveTo(character, titan.Head.Position, 1)

                                        until humanoid.PlatformStand == true or resetontimer == false
                                    end
                                end
                            end
                        end)
                    end
                end)
            end
        end
    })

    Tab4:AddToggle({
        Name = "Reset if stuck (Buggy)",
        Default = resetstuck,
        Callback = function(state)
            resetstuck = state
            settings.ResetStuck = state
            saveSettings(settings)

            if resetstuck and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()

                    if not character or not character:FindFirstChild("HumanoidRootPart") then
                        return
                    end

                    local initialPosition = humanoidRootPart.Position
                    local initialTime = tick()

                    while resetstuck do task.wait()
                        local success, err = pcall(function()

                            if not character or not character:FindFirstChild("HumanoidRootPart") then
                                resetstuck = false
                                return
                            end

                            local currentPosition = humanoidRootPart.Position
                            local currentTime = tick()

                            -- //Reset Character if in same spot for too long\\

                            if (currentPosition - initialPosition).Magnitude <= 15 and (currentPosition - workspace.TeleportBaseplate.Position).Magnitude > 50 then
                                if currentTime - initialTime >= 30 and (currentPosition - workspace.TeleportBaseplate.Position).Magnitude > 50 then
                                    --print("resetting on stationary position")
                                    humanoid.Health = 0
                                    task.wait(1)
                                end
                            else
                                initialPosition = currentPosition
                                initialTime = currentTime
                            end

                            -- //Reset character if voided (doesnt work currently)\\

                            if character:FindFirstChild("HumanoidRootPart") == nil or character:FindFirstChild("Humanoid") == nil or character.WorldPivot.Position.Y == -1000000 then
                                --print("resetting, no Humanoid..")
                                humanoid.Health = 0
                                task.wait(1)
                                resetstuck = false
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    Tab4:AddToggle({
        Name = "Auto Tp To SafeSpot At Low Health",
        Default = autotp,
        Callback = function(state)
            autotp = state
            settings.AutoTP = state
            saveSettings(settings)
            if autotp then
                task.spawn(function()
                    while autotp do task.wait()
                        local success, err = pcall(function()
                            tplow = false
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
    
                            if teleportBaseplate and humanoid and humanoid.MaxHealth > 0 then
                                local currentHealthPercent = (humanoid.Health / humanoid.MaxHealth) * 100
                                if currentHealthPercent <= healthtpat and humanoid.PlatformStand == false then
                                    tplow = true
                                    repeat task.wait(.2)
                                        moveTo(character, teleportBaseplate.Position + Vector3.new(0, 3, 0))
                                        currentHealthPercent = (humanoid.Health / humanoid.MaxHealth) * 100
                                    until currentHealthPercent >= healthstop or not autotp
                                end
                            end
                        end)
                        if not success then
                            warn(err)
                        end
                    end
                end)
            end
        end
    })

    local kickOnDeath = false

    Tab4:AddToggle({
        Name = "Kick on Death [TO SAVE STREAK]",
        Default = settings.KickOnDeath,
        Callback = function(state)
            kickOnDeath = state
            settings.KickOnDeath = state 
            saveSettings(settings)
            if kickOnDeath then
                humanoid.Died:Connect(function()
                    player:Kick("KICKED YOU TO SAVE YOUR STREAK")
                end)
            end
        end
    })

    Tab4:AddToggle({
        Name = "Auto Deaths/ Damage Farm",
        Default = damagefarm,
        Callback = function(state)
            damagefarm = state
            settings.DamageFarm = state
            saveSettings(settings)
            if damagefarm and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    local currentTitan = nil
                    while damagefarm do task.wait()
                        local success, err = pcall(function()
                            local closestTitan = nil
                            local closestDistance = math.huge

                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
                                    local distance = (titan.Head.Position - humanoidRootPart.Position).magnitude
                                    if distance < closestDistance then
                                        closestDistance = distance
                                        closestTitan = titan
                                    end
                                end
                            end

                            if closestTitan then
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                end

                                while humanoid.PlatformStand do
                                    task.wait()
                                end

                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()
                                moveTo(character, currentTitanHead.Position)
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    Tab4:AddSection({ Name = "Auto Retry: " })

    Tab4:AddToggle({
        Name = "Auto Retry",
        Default = retry,
        Callback = function(state)
            retry = state
            settings.Retry = state
            saveSettings(settings)
            if retry and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()

                    local function getRewards()
                        local playerGui = player.PlayerGui
                        while not playerGui.Interface or not playerGui.Interface.Rewards do
                            task.wait()
                        end
                        return playerGui.Interface.Rewards
                    end

                    while retry do task.wait(.1)
                        local rewards = getRewards()
                        local button = rewards.Main.Info.Main.Buttons.Retry

                        if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible and (button.Title.TextColor3 == Color3.fromRGB(0, 0, 0) or button.Title.TextColor3 == Color3.fromRGB(255, 255, 255)) then
                            if not healing then
                                press(button)
                                task.wait(.1)
                            end
                        end
                    end
                end)
            end
        end
    })

    Tab4:AddLabel("Only use below if the other retry doesn't work for your device")

    Tab4:AddToggle({
        Name = "Auto Retry Mission Alternate",
        Default = retryalt,
        Callback = function(state)
            retryalt = state
            settings.RetryAlt = state
            saveSettings(settings)
            if retryalt and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()

                    local clickX = math.floor(screenWidth * 0.63)
                    local clickY = math.floor(screenHeight * 0.5)

                    local function getRewards()
                        local playerGui = player.PlayerGui
                        while not playerGui.Interface or not playerGui.Interface.Rewards do
                            task.wait()
                        end
                        return playerGui.Interface.Rewards
                    end

                    local function calculateButtonSize(button)
                        local absoluteSize = Vector2.new(192000, -5919.2002)
                        local parent = button.Parent
                        local scaleX = absoluteSize.X / parent.AbsoluteSize.X
                        local scaleY = absoluteSize.Y / parent.AbsoluteSize.Y
                        return UDim2.new(scaleX, 0, scaleY, 0)
                    end

                    while retryalt do task.wait(.1)
                        local rewards = getRewards()
                        local button = rewards.Main.Info.Main.Buttons.Retry

                        if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible then
                            if not healing then
                                button.Size = UDim2.new(0, 100, 0, 0)
                                button.Size = calculateButtonSize(button)

                                local originalSize = button.Size
                                button.Size = originalSize + UDim2.new(0, 1, 0, 1)
                                task.wait(.05)
                                button.Size = originalSize

                                vim:SendMouseButtonEvent(clickX, clickY, 0, true, game, 1)
                                task.wait(.1)
                                vim:SendMouseButtonEvent(clickX, clickY, 0, false, game, 0)
                            end
                        end
                    end
                end)
            end
        end
    })

    Tab4:AddLabel("Use this if gui is not auto hiding")

    Tab4:AddToggle({
        Name = "Auto Retry Mission Other Alternate",
        Default = retryotheralt,
        Callback = function(state)
            retryotheralt = state
            settings.RetryOtherAlt = state
            saveSettings(settings)
            if retryotheralt and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()

                    local function getRewards()
                        local playerGui = player.PlayerGui
                        while not playerGui.Interface or not playerGui.Interface.Rewards do
                            task.wait()
                        end
                        return playerGui.Interface.Rewards
                    end

                    while retryotheralt do task.wait(.1)
                        local rewards = getRewards()
                        local button = rewards.Main.Info.Main.Buttons.Retry

                        if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible then
                            if not healing then
                                realClick(button)
                            end
                        end
                    end
                end)
            end
        end
    })

    Tab6:AddSection({ Name = "All features in this section are risky"})

    Tab6:AddSection({ Name = "They may cause you to get banned or shadow banned"})

    Tab6:AddSection({ Name = "OP Farm requires DrillThrust & TorrentialSteel"})

    Tab6:AddSection({ Name = "Thrust 1st skill, TorrentialSteel 2nd skill"})

    Tab6:AddToggle({
        Name = "OP Farm",
        Default = opfarm,
        Callback = function(state)
            opfarm = state
            settings.OPFARM = state
            saveSettings(settings)

            if opfarm and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and not damagefarm then
                pcall(function()
                    task.spawn(function()
                        local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
                        if Workspace:GetAttribute("Type") == "Missions" then
                            while opfarm and not autofarmtitansrisky and not autofarmtitansold and not autofarmtitansalt do
                                task.wait()
                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end
                                humanoidRootPart.CFrame = teleportBaseplate.CFrame * CFrame.new(0, 3, 0)
                            end
                        elseif Workspace:GetAttribute("Type") ~= "Missions" then
                            while opfarm and not autofarmraidrisky and not autofarmraidalt and not autofarmraid do task.wait()
                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end
                                humanoidRootPart.CFrame = teleportBaseplate.CFrame * CFrame.new(0, 3, 0)
                            end
                        end
                    end)
                    task.spawn(function()
                        while opfarm do task.wait()
                            local user = player.Name

                            local allTitansReady = false
                            while not allTitansReady do
                                allTitansReady = true
                                local titanCount = 0
                                for _, titan in ipairs(workspace.Titans:GetChildren()) do
                                    local hitbox = titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit")
                                    local targetPoint = (titan.Name == "Attack_Titan" and hitbox and hitbox:FindFirstChild(tostring(titan.Marker.Adornee))) or
                                        (hitbox and hitbox:FindFirstChild("Nape"))
                                    if not targetPoint or not targetPoint:IsA("BasePart") then
                                        allTitansReady = false
                                    else
                                        titanCount += 1
                                        if titan.Name == "Attack_Titan" then
                                            allTitansReady = true
                                            break
                                        end
                                    end

                                    if titan.Name == "Attack_Titan" then
                                        allTitansReady = true
                                        break
                                    end

                                    if titanCount >= 8 then
                                        allTitansReady = true
                                        break
                                    end
                                end

                                if allTitansReady and titanCount >= 8 then
                                    break
                                end

                                task.wait(.1)
                            end                            

                            vim:SendKeyEvent(true, Enum.KeyCode.One, false, nil)
                            task.wait(.1)
                            vim:SendKeyEvent(false, Enum.KeyCode.One, false, nil)

                            repeat task.wait()
                                local thrust = workspace:FindFirstChild(user .. "_Thrust")
                                if thrust then
                                    for _, titan in ipairs(workspace.Titans:GetChildren()) do
                                        local hitbox = titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit")
                                        local targetPoint = (titan.Name == "Attack_Titan" and hitbox and hitbox:FindFirstChild(tostring(titan.Marker.Adornee))) or
                                            (hitbox and hitbox:FindFirstChild("Nape"))
                                        if targetPoint and targetPoint:IsA("BasePart") then
                                            firetouchinterest(thrust, targetPoint, 0)
                                            firetouchinterest(thrust, targetPoint, 1)
                                        end
                                    end
                                end
                            until not workspace:FindFirstChild(user .. "_Thrust")

                            vim:SendKeyEvent(true, Enum.KeyCode.Two, false, nil)
                            task.wait(.1)
                            vim:SendKeyEvent(false, Enum.KeyCode.Two, false, nil)

                            repeat task.wait()
                                local thrust2 = workspace:FindFirstChild(user .. "_Steel")
                                if thrust2 then
                                    for _, titan in ipairs(workspace.Titans:GetChildren()) do
                                        local hitbox = titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit")
                                        local targetPoint = (titan.Name == "Attack_Titan" and hitbox and hitbox:FindFirstChild(tostring(titan.Marker.Adornee))) or
                                            (hitbox and hitbox:FindFirstChild("Nape"))
                                        if targetPoint and targetPoint:IsA("BasePart") then
                                            firetouchinterest(thrust2, targetPoint, 0)
                                            firetouchinterest(thrust2, targetPoint, 1)
                                        end
                                    end
                                end
                            until not workspace:FindFirstChild(user .. "_Steel")
                        end
                    end)
                end)
            end
        end
    })

    Tab6:AddToggle({
        Name = "Autofarm All Titans Fast Risky",
        Default = autofarmtitansrisky,
        Callback = function(state)
            autofarmtitansrisky = state
            settings.AutoFarmTitansRisky = state
            saveSettings(settings)

            if autofarmtitansrisky and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 and not damagefarm and Workspace:GetAttribute("Type") == "Missions" then
                task.spawn(function()
                    oldKillCount = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()
                    local idlespot

                    -- Delete Objects
                    pcall(function()
                        Workspace.Climbable.Buildings:Destroy()
                        for _, deleted in pairs(Workspace.Unclimbable:GetChildren()) do
                            if deleted.Name ~= "Reloads" and deleted.Name ~= "Cutscene" and deleted.Name ~= "Plane" and deleted.Name ~= "Objective" then
                                deleted:Destroy()
                            end
                        end
                    end)

                    -- Auto Use Gas
                    local function AutoUseGas()
                        while autofarmtitansrisky do task.wait()
                            if not skibidirefill and foundtitanyes then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    -- M1 Check
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmtitansrisky do task.wait()
                            if skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmtitansrisky do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                humanoid.Health = 0
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(autoresetnoblades_orrefills)

                    -- Start of Auto Farm
                    while autofarmtitansrisky do task.wait()
                        foundtitanyes = false
                        -- Remove Shiganshina Walls
                        task.spawn(function()
                            pcall(function()
                                task.wait(.5)
                                if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                    game.Workspace.Climbable.Walls:Destroy()
                                end
                            end)
                        end)

                        while player:GetAttribute("Cutscene") == true do
                            task.wait()
                        end

                        local success, err = pcall(function()
                            local closestTitan = nil
                            local closestDistance = math.huge
                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan:FindFirstChild("Hitboxes") and titan.Hitboxes:FindFirstChild("Hit") and titan.Hitboxes.Hit:FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
                                    if titan:GetAttribute("Type") == "Colossal" and titan:GetAttribute("State") ~= "Idle" or  titan:GetAttribute("Type") ~= "Colossal" then
                                        if workspace:GetAttribute("Objective") == "Stall" then
                                            distance = (titan.Head.Position - Vector3.new(-734, 18, 641)).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Protect" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Protect.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Escort" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Escort.Objective.Position).magnitude
                                        elseif workspace:GetAttribute("Objective") == "Guard" then
                                            if not idlespot then
                                                idlespot = workspace.Unclimbable.Objective.Guard.Objective.CFrame
                                            end
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Guard.Objective.Position).magnitude
                                            if distance > 700 then
                                                continue
                                            end
                                        elseif workspace:GetAttribute("Objective") == "Defend" then
                                            distance = (titan.Head.Position - workspace.Unclimbable.Objective.Defend.Objective.Position).magnitude
                                        else
                                            distance = (titan.Head.Position - humanoidRootPart.Position).magnitude
                                        end
                                        if distance < closestDistance then
                                            closestDistance = distance
                                            closestTitan = titan
                                        end
                                    end
                                end
                            end

                            if closestTitan then
                                foundtitanyes = true
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                    titanStartTime = os.clock()
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()
                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    -- Blade variables
                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- Gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)

                                    nape.Size, nape.CanCollide, nape.Anchored = Vector3.new(300, 300, 300), false, false

                                    -- Refill Section
                                    while (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) do task.wait()
                                        bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                        gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                        gaspercentageNumber = stringToNumber(gaspercentagetext)
                                        gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                        while skibidirefill do task.wait()
                                            if not sigmarefill then
                                                humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
                                            end
                                        end

                                        if not sigmarefill then
                                            humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
                                        elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                            break
                                        end

                                        if bladeSetsText == "3 / 3" or not autofarmtitansrisky or gaspercentageNumber > 95 then
                                            break
                                        end
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    -- Teleport to Titan

                                    -- Attack Titan
                                    local tp_time = os.clock() + 0.5
                                    --local printed = false

                                    while os.clock() < tp_time do task.wait()
                                        humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 400, 0)
                                        if not currentTitan:FindFirstChild("Head") then
                                            break
                                        end
                                    end

                                    clickCenterScreen()
                                    clickCenterScreen()
                                    --print("attacking titan")
                                    humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, distancey, 0)
                                    --print("finished attacking")

                                    -- Check if refill
                                    if (bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand) or (gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand) then
                                        break
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    -- Failsafe
                                    local elapsedTime = os.clock() - titanStartTime
                                    if elapsedTime >= 60 and currentTitan:FindFirstChild("Humanoid") then
                                        sigmaskibidi = true
                                        for _ = 1, 8 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            while humanoid.PlatformStand do
                                                task.wait()
                                            end

                                            while player:GetAttribute("Cutscene") == true do
                                                task.wait()
                                            end

                                            local teleportEndTime = os.clock() + 3
                                            while os.clock() < teleportEndTime do
                                                task.wait()
                                                fastmoveto(character, currentTitanHead.Position + Vector3.new(0, 500, 0))
                                            end

                                            while skibidirefill do
                                                task.wait()
                                            end

                                            clickCenterScreen()
                                            clickCenterScreen()
                                            task.wait(.1)
                                            fastmoveto(character, currentTitan.Nape.CFrame)
                                        end

                                        for _ = 1, 1000 do
                                            if not currentTitan:FindFirstChild("Humanoid") then
                                                sigmaskibidi = false
                                                break
                                            end

                                            humanoid.Health = 0
                                            task.wait(.1)
                                        end
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        moveCancelled = true
                                        break
                                    end
                                until (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and autotp or not autofarmtitansrisky or not currentTitan:FindFirstChild("Humanoid") or not currentTitan:FindFirstChild("Head") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand or currentTitan:GetAttribute("Type") == "Colossal" and currentTitan:GetAttribute("State") == "Idle"
                            else
                                if idlespot then
                                    humanoidRootPart.CFrame = idlespot * CFrame.new(0, 300, 0)
                                end
                            end

                            -- Health Recovery Loop
                            while (humanoid.Health / humanoid.MaxHealth) * 100 <= healthstop and autofarmtitansrisky and autotp do
                                task.wait()
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    Tab6:AddToggle({
        Name = "Auto Refill Blades RISKY",
        Default = autorefillrisky,
        Callback = function(state)
            autorefillrisky = state
            settings.AutoRefillRisky = state
            saveSettings(settings)
            if autorefillrisky and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    local refill_count = 0

                    local function getAnimationTrack()
                        local tracks = humanoid:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://15406891131" then
                                return track
                            end
                        end
                        return nil
                    end

                    local positions = {
                        [3] = CFrame.new(0,0,2),
                        [6] = CFrame.new(0,0,4),
                        [8] = CFrame.new(0,0,6),
                        [10] = CFrame.new(0,0,8),
                        [13] = CFrame.new(0,0,-2),
                        [16] = CFrame.new(0,0,-4),
                        [20] = CFrame.new(0,0,-6)
                    }

                    RefillStation = nil

                    while autorefillrisky do task.wait()
                        local success, err = pcall(function()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")

                            if workspace.Unclimbable.Reloads:FindFirstChild("GasTanks") and not RefillStation then
                                RefillStation = workspace.Unclimbable.Reloads.GasTanks.Refill.CFrame
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            while bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and humanoid.PlatformStand == false and gradientOffset.X == 0 and not tplow do task.wait()
                                skibidirefill = true
                                --print("Refilling Status:", skibidirefill)

                                while humanoid.PlatformStand do
                                    task.wait()
                                end

                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end

                                while player.PlayerGui.Interface.HUD.Visible == false do
                                    task.wait()
                                end

                                sigmarefill = true

                                -- //TP REFILL\\
                                humanoidRootPart.CFrame = RefillStation
                                task.wait(.1)
                                humanoidRootPart.CFrame = RefillStation

                                -- //PRESS R\\

                                local animationTrack = getAnimationTrack()

                                while not animationTrack do
                                    vim:SendKeyEvent(true, Enum.KeyCode.R, false, game)
                                    vim:SendKeyEvent(false, Enum.KeyCode.R, false, game)
                                    task.wait(0.05)
                                    animationTrack = getAnimationTrack()
                                    refill_count = refill_count + 1

                                    while player.PlayerGui.Interface.HUD.Visible == false do
                                        task.wait()
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    if positions[refill_count] then
                                        humanoidRootPart.CFrame = RefillStation * positions[refill_count]
                                    end

                                    if refill_count == 25 then
                                        break
                                    end
                                end

                                if animationTrack then
                                    local finishedPlaying = false
                                    animationTrack.Stopped:Connect(function()
                                        finishedPlaying = true
                                    end)

                                    local tp_timerefill = os.clock() + 7
                                    while os.clock() < tp_timerefill do task.wait()
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        --print("moving above refill")
                                        humanoidRootPart.CFrame = RefillStation * CFrame.new(0, 300, 800)
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                if not animationTrack then
                                    local tp_away_refill = os.clock() + 7
                                    while os.clock() < tp_away_refill do task.wait()
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        --print("moving above refill")
                                        humanoidRootPart.CFrame = RefillStation * CFrame.new(0, 300, 800)
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                skibidirefill = false
                                sigmarefill = false
                                --print("Refilling Status:", skibidirefill)
                            end
                            refill_count = 0
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    Tab6:AddToggle({
        Name = "Auto Refill Gas Risky",
        Default = autorefillgasrisky,
        Callback = function(state)
            autorefillgasrisky = state
            settings.AutoRefillgasRisky = state
            saveSettings(settings)
            if autorefillgasrisky and game.PlaceId ~= 13379208636 and game.PlaceId ~= 14916516914 then
                task.spawn(function()
                    local refill_count = 0

                    local positions = {
                        [3] = CFrame.new(0,0,2),
                        [6] = CFrame.new(0,0,4),
                        [8] = CFrame.new(0,0,6),
                        [10] = CFrame.new(0,0,8),
                        [13] = CFrame.new(0,0,-2),
                        [16] = CFrame.new(0,0,-4),
                        [20] = CFrame.new(0,0,-6)
                    }

                    local function getAnimationTrack()
                        local tracks = humanoid:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://15406891131" then
                                return track
                            end
                        end
                        return nil
                    end

                    RefillStation = nil

                    while autorefillgasrisky do task.wait()
                        local success, err = pcall(function()
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                            local teleportBaseplate = workspace:FindFirstChild("TeleportBaseplate")
                            local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                            local gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))

                            if workspace.Unclimbable.Reloads:FindFirstChild("GasTanks") and not RefillStation then
                                RefillStation = workspace.Unclimbable.Reloads.GasTanks.Refill.CFrame
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            while gaspercentagetext <= 2 and humanoid.PlatformStand == false and gradientOffset.Y == 0 and not tplow do task.wait()
                                --print("1 gradientOffset:", gradientOffset.Y, "gaspercentagetext:", gaspercentagetext)
                                skibidirefill = true

                                gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))

                                while humanoid.PlatformStand do
                                    task.wait()
                                end

                                while player:GetAttribute("Cutscene") == true do
                                    task.wait()
                                end

                                sigmarefill = true

                                -- //TP REFILL\\

                                humanoidRootPart.CFrame = RefillStation
                                task.wait(.1)
                                humanoidRootPart.CFrame = RefillStation

                                -- //PRESS R\\

                                local animationTrack = getAnimationTrack()

                                while not animationTrack and gaspercentagetext <= 2 do
                                    vim:SendKeyEvent(true, Enum.KeyCode.R, false, game)
                                    vim:SendKeyEvent(false, Enum.KeyCode.R, false, game)
                                    task.wait(0.05)
                                    animationTrack = getAnimationTrack()
                                    refill_count = refill_count + 1
                                    while player.PlayerGui.Interface.HUD.Visible == false do
                                        task.wait()
                                    end

                                    while player:GetAttribute("Cutscene") == true do
                                        task.wait()
                                    end

                                    if positions[refill_count] then
                                        humanoidRootPart.CFrame = RefillStation * positions[refill_count]
                                    end

                                    if refill_count == 25 then
                                        break
                                    end
                                end

                                if animationTrack then
                                    local finishedPlaying = false
                                    animationTrack.Stopped:Connect(function()
                                        finishedPlaying = true
                                    end)

                                    local tp_refill_gas = os.clock() + 7
                                    while os.clock() < tp_refill_gas do task.wait()
                                        gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                        gaspercentagetext = tonumber(gaspercentage.Text:match("%d+"))
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        --print("moving above refill")
                                        humanoidRootPart.CFrame = RefillStation * CFrame.new(0, 300, 800)
                                        if finishedPlaying or gaspercentagetext > 90 or gradientOffset.Y == 1 then
                                            break
                                        end
                                    end
                                end

                                if not animationTrack then
                                    local tp_away_gas = os.clock() + 6
                                    while os.clock() < tp_away_gas do task.wait()
                                        while humanoid.PlatformStand do
                                            task.wait()
                                        end

                                        while player:GetAttribute("Cutscene") == true do
                                            task.wait()
                                        end

                                        -- //TP FAR AWAY FROM REFILL SO TITANS GO AWAY FROM REFILL INCASE FIRST REFILL DOESNT WORK\\

                                        --print("moving above refill")
                                        humanoidRootPart.CFrame = RefillStation * CFrame.new(0, 300, 800)
                                        if finishedPlaying then
                                            break
                                        end
                                    end
                                end

                                skibidirefill = false
                                sigmarefill = false
                                --print("2 gradientOffset:", gradientOffset.Y, "gaspercentagetext:", gaspercentagetext)
                            end
                            refill_count = 0
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    Tab6:AddToggle({
        Name = "Autofarm Raid Risky",
        Default = autofarmraidrisky,
        Callback = function(state)
            autofarmraidrisky = state
            settings.AutoFarmRaidRisky = state
            saveSettings(settings)
            if autofarmraidrisky and game.PlaceId == 14012874501 and not damagefarm and Workspace:GetAttribute("Type") == "Raids" then
                task.spawn(function()
                    local roar = false
                    oldKillCount = 0
                    local TP_Count = 0
                    local currentTitan = nil
                    local titanStartTime = os.clock()

                    local function getAnimationTrack()
                        local tracks = workspace.Titans.Attack_Titan.Fake.Controller.Animator:GetPlayingAnimationTracks()
                        for _, track in ipairs(tracks) do
                            if track.Animation.AnimationId == "rbxassetid://17395738065" then
                                return track
                            end
                        end
                        return nil
                    end

                    -- // CHECK WHEN EREN ROARS TO TP ABOVE TO NOT GET HIT \\
                    local function RoarCheck()
                        while autofarmraidrisky do task.wait()

                            while skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp do
                                task.wait()
                            end

                            if workspace.Titans:FindFirstChild("Attack_Titan") and player.PlayerGui.Interface.HUD.Visible then
                                local currentTitanHead = workspace.Titans.Attack_Titan:FindFirstChild("Head") or workspace.Titans.Attack_Titan:GetPivot()

                                local finishedPlaying = false
                                local animationTrack = getAnimationTrack()

                                if animationTrack then
                                    local function checkAnimationTrack()
                                        while animationTrack and animationTrack.IsPlaying do task.wait(.1)
                                            roar = true
                                            humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 400, 0)
                                            while not player.PlayerGui.Interface.HUD.Visible or skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp or humanoid.PlatformStand do
                                                task.wait()
                                                roar = false
                                            end
                                            if not animationTrack.IsPlaying then
                                                finishedPlaying = true
                                                roar = false
                                            end
                                        end
                                    end
                                    task.spawn(checkAnimationTrack)
                                end
                            end
                        end
                    end

                    -- //AUTO USE GAS\\
                    local function AutoUseGas()
                        while autofarmraidrisky do task.wait()
                            if not skibidirefill and foundtitanyes then
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
                                task.wait(.1)
                                vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
                                task.wait(4)
                            end
                        end
                    end

                    -- //M1 CHECK\\
                    local function M1Check()
                        local attacktimer = os.clock()
                        local animationIds = {
                            "rbxassetid://14518641514", "rbxassetid://14518654101",
                            "rbxassetid://14518651360", "rbxassetid://14518648320"
                        }
                        while autofarmraidrisky do task.wait()
                            if skibidirefill or player.PlayerGui.Interface.Chests.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
                                attacktimer = os.clock()
                            end
                            local tracks = humanoid:GetPlayingAnimationTracks()
                            for _, track in ipairs(tracks) do
                                if table.find(animationIds, track.Animation.AnimationId) then
                                    attacktimer = os.clock()
                                    break
                                end
                            end
                            if os.clock() - attacktimer >= 30 then
                                humanoid.Health = 0
                                break
                            end
                        end
                    end

                    local function autoresetnoblades_orrefills()
                        while autofarmraidrisky do task.wait()
                            local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                            local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                            if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
                                humanoid.Health = 0
                            end
                        end
                    end

                    task.spawn(AutoUseGas)
                    task.spawn(M1Check)
                    task.spawn(RoarCheck)
                    task.spawn(autoresetnoblades_orrefills)

                    -- //START OF AUTO FARM\\
                    while autofarmraidrisky do task.wait()
                        foundtitanyes = false
                        local success, err = pcall(function()

                            while player.PlayerGui.Interface.HUD.Visible == false do
                                task.wait()
                            end

                            while player:GetAttribute("Cutscene") == true do
                                task.wait()
                            end

                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") then
                                        for _, v in pairs(workspace.Climbable.Buildings:GetChildren()) do
                                            if v.Name ~= "Trost_House6" then
                                                v:Destroy()
                                            end
                                        end
                                    end
                                end)
                            end)

                            -- //REMOVE SHIGANSHINA WALLS\\ 
                            task.spawn(function()
                                pcall(function()
                                    task.wait(.5)
                                    if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
                                        game.Workspace.Climbable.Walls:Destroy()
                                    end
                                end)
                            end)

                            -- //GET CLOSEST TITAN TO ROCK OR EREN\\
                            local a = workspace.Unclimbable:FindFirstChild("Objective")
                            local b = a:FindFirstChild("Defend_Eren")
                            local c
                            local objectivePart
                            if b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("Attack_Titan")
                                objectivePart = c:FindFirstChild("HumanoidRootPart")
                            elseif not b:FindFirstChild("Attack_Titan") then
                                c = b:FindFirstChild("BigRock")
                                objectivePart = c
                            end

                            local closestTitan = nil
                            local closestDistance = math.huge

                            for _, titan in pairs(workspace.Titans:GetChildren()) do
                                if titan:IsA("Model") and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
                                    local titanPosition = titan.Head.Position
                                    local objectivePosition = objectivePart.Position
                                    local distance = (titanPosition - objectivePosition).magnitude

                                    if titan.Name == "Attack_Titan" then
                                        closestTitan = titan
                                        break
                                    elseif distance < closestDistance then
                                        closestDistance = distance
                                        closestTitan = titan
                                    end
                                end
                            end

                            if closestTitan then
                                foundtitanyes = true
                                if currentTitan ~= closestTitan then
                                    currentTitan = closestTitan
                                    titanStartTime = os.clock()
                                end

                                function Store_Original_Hitbox(closestTitan)
                                    local properties = {}

                                    if closestTitan.Name == "Attack_Titan" then
                                        local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                        for _, hitboxname in ipairs(hitboxnames) do
                                            local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                            if hitbox then
                                                local size = hitbox.Size
                                                if size ~= Vector3.new(300, 300, 300) then
                                                    properties[hitboxname] = {
                                                        Size = size,
                                                        Anchored = hitbox.Anchored,
                                                        CanCollide = hitbox.CanCollide
                                                    }
                                                end
                                            end
                                        end
                                    end

                                    return properties
                                end

                                local storedProperties = Store_Original_Hitbox(closestTitan)

                                function restoreProperties(closestTitan, properties)
                                    if closestTitan.Name == "Attack_Titan" then
                                        local marker = closestTitan:WaitForChild("Marker")
                                        local currentAdornee = marker.Adornee

                                        marker:GetPropertyChangedSignal("Adornee"):Connect(function()
                                            if marker.Adornee ~= currentAdornee then
                                                currentAdornee = marker.Adornee

                                                local hitboxnames = {"Eyes", "LeftArm", "LeftLeg", "Nape", "RightArm", "RightLeg"}

                                                for _, hitboxname in ipairs(hitboxnames) do
                                                    local hitbox = closestTitan.Hitboxes.Hit:FindFirstChild(hitboxname)

                                                    if hitbox and properties[hitboxname] then
                                                        hitbox.Size = properties[hitboxname].Size
                                                        hitbox.Anchored = properties[hitboxname].Anchored
                                                        hitbox.CanCollide = properties[hitboxname].CanCollide
                                                    end
                                                end
                                            end
                                        end)
                                    end
                                end

                                local function Expand_Hitbox(closestTitan)
                                    local napeObject

                                    if closestTitan.Name == "Attack_Titan" and closestTitan.Hitboxes:FindFirstChild("Hit") then
                                        local hitboxname = tostring(closestTitan.Marker.Adornee)
                                        for _, hitbox in ipairs(closestTitan.Hitboxes.Hit:GetChildren()) do
                                            if hitbox.Name == hitboxname then
                                                napeObject = hitbox
                                                break
                                            end
                                        end
                                    elseif closestTitan.Name ~= "Attack_Titan" then
                                        napeObject = closestTitan.Hitboxes.Hit.Nape
                                    end

                                    if napeObject then
                                        napeObject.Size = Vector3.new(300, 300, 300)
                                        napeObject.CanCollide = false
                                        napeObject.Anchored = false
                                    end
                                end

                                local nape = currentTitan.Hitboxes.Hit.Nape
                                local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()

                                local startTime = os.clock()
                                local moveCancelled = false
                                local notfirsttp = false
                                local notsecondtp = false

                                repeat task.wait()

                                    local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                    local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
                                    -- gas variables
                                    local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
                                    local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
                                    local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                    local gaspercentageNumber = stringToNumber(gaspercentagetext)

                                    Store_Original_Hitbox(closestTitan)

                                    Expand_Hitbox(closestTitan)

                                    -- Refill Section
                                    while bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand do task.wait()

                                        bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
                                        gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
                                        gaspercentageNumber = stringToNumber(gaspercentagetext)
                                        gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

                                        while skibidirefill do task.wait()
                                            --print("skibidirefill status:", skibidirefill)
                                            if not sigmarefill then
                                                --print("skibidirefill status:", skibidirefill, "moveCancelled Status:", moveCancelled)
                                                humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
                                            end
                                        end

                                        if not sigmarefill then
                                            --print("bladeSetsText status:", bladeSetsText, "moveCancelled Status:", moveCancelled)
                                            humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
                                        elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
                                            break
                                        end

                                        --print("bladeSetsText status:", bladeSetsText, "2")
                                        if bladeSetsText == "3 / 3" or not autofarmraidrisky or gaspercentageNumber > 95 then
                                            break
                                        end
                                    end
                                        -- \\Attack Titan//
                                    if not roar then
                                        --print("roar chest status 3:", roar)
                                        local tp_time = os.clock() + 0.5
                                        while os.clock() < tp_time do task.wait()
                                            humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 400, 0)
                                        end
                                        clickCenterScreen()
                                        clickCenterScreen()
                                        humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, distancey, 0)
                                        TP_Count = TP_Count + 1
                                        if TP_Count == 3 then
                                            restoreProperties(closestTitan, storedProperties)
                                            Expand_Hitbox(closestTitan)
                                            TP_Count = 0
                                        end
                                    end

                                    -- Check if refill
                                    if bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand then
                                        break
                                    end

                                    -- Time Out after 15 seconds
                                    if os.clock() - startTime >= 15 then
                                        break
                                    end

                                until (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and autotp or not autofarmraidrisky or not currentTitan:FindFirstChild("Humanoid") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand
                            end

                            -- Health recovery loop
                            if (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
                                repeat task.wait(5)
                                until (humanoid.Health / humanoid.MaxHealth) * 100 >= healthstop or not autofarmraidrisky or not autotp
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    -- Tab6:AddToggle({
    --     Name = "Autofarm Streak Risky (Raid)",
    --     Default = autofarmraidriskystreak,
    --     Callback = function(state)
    --         autofarmraidriskystreak = state
    --         settings.AutoFarmRaidRiskyStreak = state
    --         saveSettings(settings)
    --         if autofarmraidriskystreak and game.PlaceId == 14012874501 and not damagefarm and Workspace:GetAttribute("Type") == "Raids" then
    --             task.spawn(function()
    --                 local roar = false
    --                 oldKillCount = 0
    --                 local TP_Count = 0
    --                 local currentTitan = nil
    --                 local titanStartTime = os.clock()

    --                 local function getAnimationTrack()
    --                     local tracks = workspace.Titans.Attack_Titan.Fake.Controller.Animator:GetPlayingAnimationTracks()
    --                     for _, track in ipairs(tracks) do
    --                         if track.Animation.AnimationId == "rbxassetid://17395738065" then
    --                             return track
    --                         end
    --                     end
    --                     return nil
    --                 end

    --                 -- // CHECK WHEN EREN ROARS TO TP ABOVE TO NOT GET HIT \\
    --                 local function RoarCheck()
    --                     while autofarmraidriskystreak do task.wait()

    --                         while skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp do
    --                             task.wait()
    --                         end

    --                         if workspace.Titans:FindFirstChild("Attack_Titan") and player.PlayerGui.Interface.HUD.Visible then
    --                             local currentTitanHead = workspace.Titans.Attack_Titan:FindFirstChild("Head") or workspace.Titans.Attack_Titan:GetPivot()

    --                             local finishedPlaying = false
    --                             local animationTrack = getAnimationTrack()

    --                             if animationTrack then
    --                                 local function checkAnimationTrack()
    --                                     while animationTrack and animationTrack.IsPlaying do task.wait(.1)
    --                                         roar = true
    --                                         humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 400, 0)
    --                                         while not player.PlayerGui.Interface.HUD.Visible or skibidirefill or player.PlayerGui.Interface.Rewards.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp or humanoid.PlatformStand do
    --                                             task.wait()
    --                                             roar = false
    --                                         end
    --                                         if not animationTrack.IsPlaying then
    --                                             finishedPlaying = true
    --                                             roar = false
    --                                         end
    --                                     end
    --                                 end
    --                                 task.spawn(checkAnimationTrack)
    --                             end
    --                         end
    --                     end
    --                 end

    --                 -- //AUTO USE GAS\\
    --                 local function AutoUseGas()
    --                     while autofarmraidriskystreak do task.wait()
    --                         if not skibidirefill and foundtitanyes then
    --                             vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(true, Enum.KeyCode.Space, false, game)
    --                             task.wait(.1)
    --                             vim:SendKeyEvent(false, Enum.KeyCode.Space, false, game)
    --                             task.wait(4)
    --                         end
    --                     end
    --                 end

    --                 -- //M1 CHECK\\
    --                 local function M1Check()
    --                     local attacktimer = os.clock()
    --                     local animationIds = {
    --                         "rbxassetid://14518641514", "rbxassetid://14518654101",
    --                         "rbxassetid://14518651360", "rbxassetid://14518648320"
    --                     }
    --                     while autofarmraidriskystreak do task.wait()
    --                         if skibidirefill or player.PlayerGui.Interface.Chests.Visible or (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
    --                             attacktimer = os.clock()
    --                         end
    --                         local tracks = humanoid:GetPlayingAnimationTracks()
    --                         for _, track in ipairs(tracks) do
    --                             if table.find(animationIds, track.Animation.AnimationId) then
    --                                 attacktimer = os.clock()
    --                                 break
    --                             end
    --                         end
    --                         if os.clock() - attacktimer >= 30 then
    --                             humanoid.Health = 0
    --                             break
    --                         end
    --                     end
    --                 end

    --                 local function autoresetnoblades_orrefills()
    --                     while autofarmraidriskystreak do task.wait()
    --                         local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                         local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
    --                         if player:GetAttribute("Refills") == 0 and bladeSetsText == "0 / 3" and character["Rig_"..player.Name].LeftHand.Blade_1.Transparency == 1 and gradientOffset.X == 0 and player.PlayerGui.Interface.Warning.TextTransparency == 1 and player.PlayerGui.Interface.Warning.TextStrokeTransparency == 1 then
    --                             humanoid.Health = 0
    --                         end
    --                     end
    --                 end

    --                 task.spawn(AutoUseGas)
    --                 task.spawn(M1Check)
    --                 task.spawn(RoarCheck)
    --                 task.spawn(autoresetnoblades_orrefills)

    --                 -- //START OF AUTO FARM\\
    --                 while autofarmraidriskystreak do task.wait()
    --                     foundtitanyes = false
    --                     local success, err = pcall(function()

    --                         while player.PlayerGui.Interface.HUD.Visible == false do
    --                             task.wait()
    --                         end

    --                         while player:GetAttribute("Cutscene") == true do
    --                             task.wait()
    --                         end

    --                         task.spawn(function()
    --                             pcall(function()
    --                                 task.wait(.5)
    --                                 if workspace:FindFirstChild("Climbable") then
    --                                     for _, v in pairs(workspace.Climbable.Buildings:GetChildren()) do
    --                                         if v.Name ~= "Trost_House6" then
    --                                             v:Destroy()
    --                                         end
    --                                     end
    --                                 end
    --                             end)
    --                         end)

    --                         -- //REMOVE SHIGANSHINA WALLS\\ 
    --                         task.spawn(function()
    --                             pcall(function()
    --                                 task.wait(.5)
    --                                 if workspace:FindFirstChild("Climbable") and workspace.Climbable:FindFirstChild("Walls") then
    --                                     game.Workspace.Climbable.Walls:Destroy()
    --                                 end
    --                             end)
    --                         end)

    --                         -- //GET CLOSEST TITAN TO ROCK OR EREN\\
    --                         local a = workspace.Unclimbable:FindFirstChild("Objective")
    --                         local b = a:FindFirstChild("Defend_Eren")
    --                         local c
    --                         local objectivePart
    --                         if b:FindFirstChild("Attack_Titan") then
    --                             c = b:FindFirstChild("Attack_Titan")
    --                             objectivePart = c:FindFirstChild("HumanoidRootPart")
    --                         elseif not b:FindFirstChild("Attack_Titan") then
    --                             c = b:FindFirstChild("BigRock")
    --                             objectivePart = c
    --                         end

    --                         local closestTitan = nil
    --                         local closestDistance = math.huge

    --                         for _, titan in pairs(workspace.Titans:GetChildren()) do
    --                             if titan:IsA("Model") and titan.Name ~= "Attack_Titan" and titan.Hitboxes:FindFirstChild("Hit"):FindFirstChild("Nape") and titan:FindFirstChild("Humanoid") and not humanoid.PlatformStand then
    --                                 local titanPosition = titan.Head.Position
    --                                 local objectivePosition = objectivePart.Position
    --                                 local distance = (titanPosition - objectivePosition).magnitude

    --                                 if distance < closestDistance then
    --                                     closestDistance = distance
    --                                     closestTitan = titan
    --                                 end
    --                             end
    --                         end

    --                         if closestTitan then
    --                             foundtitanyes = true
    --                             if currentTitan ~= closestTitan then
    --                                 currentTitan = closestTitan
    --                                 titanStartTime = os.clock()
    --                             end

    --                             local nape = currentTitan.Hitboxes.Hit.Nape
    --                             local currentTitanHead = currentTitan:FindFirstChild("Head") or currentTitan:GetPivot()

    --                             local startTime = os.clock()
    --                             local moveCancelled = false
    --                             local notfirsttp = false
    --                             local notsecondtp = false

    --                             repeat task.wait()

    --                                 local bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                                 local gradientOffset = player.PlayerGui.Interface.HUD.Main.Top.Blade.Inner.Bar.Gradient.Offset
    --                                 -- gas variables
    --                                 local gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset
    --                                 local gaspercentage = player.PlayerGui.Interface.HUD.Main.Top.Gas.Percentage
    --                                 local gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
    --                                 local gaspercentageNumber = stringToNumber(gaspercentagetext)

    --                                 nape.Size, nape.CanCollide, nape.Anchored = Vector3.new(300, 300, 300), false, false

    --                                 -- Refill Section
    --                                 while bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand do task.wait()

    --                                     bladeSetsText = player.PlayerGui.Interface.HUD.Main.Top.Blade.Sets.Text
    --                                     gaspercentagetext = gaspercentage.Text:match("%d+%.?%d*")
    --                                     gaspercentageNumber = stringToNumber(gaspercentagetext)
    --                                     gradientOffsett = player.PlayerGui.Interface.HUD.Main.Top.Gas.Inner.Bar.Gradient.Offset

    --                                     while skibidirefill do task.wait()
    --                                         --print("skibidirefill status:", skibidirefill)
    --                                         if not sigmarefill then
    --                                             --print("skibidirefill status:", skibidirefill, "moveCancelled Status:", moveCancelled)
    --                                             humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
    --                                         end
    --                                     end

    --                                     if not sigmarefill then
    --                                         --print("bladeSetsText status:", bladeSetsText, "moveCancelled Status:", moveCancelled)
    --                                         humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 300, 0)
    --                                     elseif bladeSetsText == "3 / 3" or gaspercentageNumber > 95 then
    --                                         break
    --                                     end

    --                                     --print("bladeSetsText status:", bladeSetsText, "2")
    --                                     if bladeSetsText == "3 / 3" or not autofarmraidriskystreak or gaspercentageNumber > 95 then
    --                                         break
    --                                     end
    --                                 end
    --                                     -- \\Attack Titan//
    --                                 if not roar then
    --                                     --print("roar chest status 3:", roar)
    --                                     local tp_time = os.clock() + 0.5
    --                                     while os.clock() < tp_time do task.wait()
    --                                         humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, 400, 0)
    --                                     end
    --                                     clickCenterScreen()
    --                                     clickCenterScreen()
    --                                     humanoidRootPart.CFrame = currentTitanHead.CFrame * CFrame.new(0, distancey, 0)
    --                                 end

    --                                 -- Check if refill
    --                                 if bladeSetsText == "0 / 3" and gradientOffset.X == 0 and not humanoid.PlatformStand or gaspercentageNumber <= 2 and gradientOffsett.Y <= 0 and not humanoid.PlatformStand then
    --                                     break
    --                                 end

    --                                 -- Time Out after 15 seconds
    --                                 if os.clock() - startTime >= 15 then
    --                                     break
    --                                 end

    --                             until (humanoid.Health / humanoid.MaxHealth) * 100 < healthtpat and autotp or not autofarmraidriskystreak or not currentTitan:FindFirstChild("Humanoid") or player.PlayerGui.Interface.Buttons:FindFirstChildOfClass("CanvasGroup") or humanoid.PlatformStand
    --                         end

    --                         -- Health recovery loop
    --                         if (humanoid.Health / humanoid.MaxHealth) * 100 <= healthtpat and autotp then
    --                             repeat task.wait(5)
    --                             until (humanoid.Health / humanoid.MaxHealth) * 100 >= healthstop or not autofarmraidriskystreak or not autotp
    --                         end
    --                     end)
    --                     if not success then warn(err) end
    --                 end
    --             end)
    --         end
    --     end
    -- })

    Tab6:AddSection({ Name = "This retry is universal for all devices but risky"})

    Tab6:AddToggle({
        Name = "Auto Retry Mission Alternate Risky",
        Default = retryaltrisky,
        Callback = function(state)
            retryaltrisky = state
            settings.RetryAltRisky = state
            saveSettings(settings)
            if retryaltrisky and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()

                    local function getRewards()
                        local playerGui = player.PlayerGui
                        while not playerGui.Interface or not playerGui.Interface.Rewards do
                            task.wait()
                        end
                        return playerGui.Interface.Rewards
                    end

                    while retryaltrisky do task.wait(.1)
                        local rewards = getRewards()

                        if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible then
                            if not healing then
                                game.ReplicatedStorage.Assets.Remotes.GET:InvokeServer("Functions", "Retry", "Add")
                            end
                        end
                    end
                end)
            end
        end
    })

    Tab6:AddSection({ Name = "Hitbox Stuff (RISKY)" })

    Tab6:AddSlider({
        Name = "Hitbox Size Slider",
        Min = 100,
        Max = 300,
        Default = hitboxsize,
        Color = Color3.fromRGB(235, 127, 12),
        Increment = 2,
        ValueName = "Hitbox Size",
        Callback = function(value)
            hitboxsize = value
            settings.HitboxSize = value
            saveSettings(settings)
        end
    })

    Tab6:AddDropdown({
        Name = "Select Part to Expand",
        Default = "Nape",
        Options = {"Nape", "Eyes", "LeftArm", "RightArm", "LeftLeg", "RightLeg"},
        Callback = function(Value)
            bodyparttoexpand = Value
        end
    })

    local originalSizes = {}

    local function createVisibleHitbox(part)
        if part:FindFirstChild("HitboxAdornment") then return end

        local adornment = Instance.new("BoxHandleAdornment")
        adornment.Name = "HitboxAdornment"
        adornment.Adornee = part
        adornment.Size = part.Size
        adornment.Color3 = Color3.fromRGB(255, 0, 0)
        adornment.Transparency = 0.7
        adornment.AlwaysOnTop = true
        adornment.ZIndex = 0
        adornment.Parent = part
    end

    local function resetHitbox(part)
        if originalSizes[part] then
            part.Size = originalSizes[part]
            if part:FindFirstChild("HitboxAdornment") then
                part.HitboxAdornment:Destroy()
            end
        end
    end

    Tab6:AddToggle({
        Name = "Hitbox Extender (RISKY)",
        Default = hitboxextender,
        Callback = function(state)
            hitboxextender = state
            settings.HitboxExtender = state
            saveSettings(settings)

            if hitboxextender and game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                task.spawn(function()
                    while hitboxextender do task.wait()
                        for _, v in pairs(workspace.Titans:GetDescendants()) do
                            if v.Name == bodyparttoexpand and v.Parent.Name == "Hit" then
                                if not originalSizes[v] then
                                    originalSizes[v] = v.Size
                                end

                                v.Size = Vector3.new(hitboxsize, hitboxsize, hitboxsize)
                                createVisibleHitbox(v)
                            end
                        end
                        if not hitboxextender then
                            for _, v in pairs(workspace.Titans:GetDescendants()) do
                                if v.Name == bodyparttoexpand and v.Parent.Name == "Hit" then
                                    resetHitbox(v)
                                end
                            end
                        end
                    end
                end)
            else
                if game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                    for _, v in pairs(workspace.Titans:GetDescendants()) do
                        if v.Name == bodyparttoexpand and v.Parent.Name == "Hit" then
                            resetHitbox(v)
                        end
                    end
                end
            end
        end
    })

    Tab6:AddToggle({
        Name = "Shadow Ban Checker (Toggle)",
        Default = shadowbancheck,
        Callback = function(state)
            shadowbancheck = state
            settings.SHADOWBANCHECK = state
            saveSettings(settings)

            if shadowbancheck then
                task.spawn(function()

                    while shadowbancheck do task.wait()
                        pcall(function()
                            for key in pairs(cloneref(game:GetService("ReplicatedStorage")).Assets.Remotes.GET:InvokeServer("Data", "Get")) do
                                if key:lower():match("blacklist") and key ~= "Is_Blacklisted" and key ~= "Is_Blacklisted_NEW" then
                                    sendNotification("Result", "You Shadow Banned Cuh :(", 5)
                                    return
                                end
                            end

                            sendNotification("Result", "You Good Cuh :)", 5)
                            task.wait(10)
                        end)
                    end
                end)
            end
        end
    })

    Tab6:AddButton({
        Name = "Shadow Ban Checker",
        Callback = function()
            print((function() for key in pairs(cloneref(game:GetService("ReplicatedStorage")).Assets.Remotes.GET:InvokeServer("Data", "Get")) do if key:lower():match("blacklist") and key ~= 'Is_Blacklisted' and key ~= 'Is_Blacklisted_NEW' then return sendNotification("Result", "You Shadow Banned Cuh :(", 5) end end return sendNotification("Result", "You Good Cuh :)", 5) end)())
        end
    })

    local function formatNumber(value)
        if value >= 1e18 then
            return string.format("%.1fQ", value / 1e18)
        elseif value >= 1e15 then
            return string.format("%.1fq", value / 1e15)
        elseif value >= 1e12 then
            return string.format("%.1ft", value / 1e12)
        elseif value >= 1e9 then
            return string.format("%.1fb", value / 1e9)
        elseif value >= 1e6 then
            return string.format("%.1fm", value / 1e6)
        elseif value >= 1e3 then
            return string.format("%.1fk", value / 1e3)
        else
            return tostring(value)
        end
    end

    local function normalizeName(name)
        return name:lower():gsub("%s+", ""):gsub("_", "")
    end

    local function logRewards()
        if player.PlayerGui.Interface:FindFirstChild("Rewards").Visible == true then
            local damageDealt = stringToNumber(player.PlayerGui.Interface.Rewards.Main.Info.Main.Stats.Damage_Dealt.Amount.Text)
            local titansSlain = player.PlayerGui.Interface.Rewards.Main.Info.Main.Stats.Titans_Killed.Amount.Text
            local timeTaken = player.PlayerGui.Interface.Rewards.Main.Info.Main.Stats.Time_Taken.Amount.Text
            local goldEarned = stringToNumber(player.PlayerGui.Interface.Rewards.Main.Info.Main.Items.Gold.Main.Inner.Quantity.Text)
            local expEarned = stringToNumber(player.PlayerGui.Interface.Rewards.Main.Info.Main.Items.XP.Main.Inner.Quantity.Text)
            local gemsEarned = 0

            local function formatBoostTime(boostName)
                local boostInSeconds = player.Boosts:FindFirstChild(boostName) and player.Boosts[boostName].Value or 0
                local hours = math.floor(boostInSeconds / 3600)
                local minutes = math.floor((boostInSeconds % 3600) / 60)
                return string.format("%d:%02d", hours, minutes)
            end
            
            local formattedTime = formatBoostTime("Luck")
            local formattedTime1 = formatBoostTime("Gold")
            local formattedTime2 = formatBoostTime("XP")
            

            if player.PlayerGui.Interface.Rewards.Main.Info.Main.Items:FindFirstChild("Gems") then
                gemsEarned = stringToNumber(player.PlayerGui.Interface.Rewards.Main.Info.Main.Items.Gems.Main.Inner.Quantity.Text)
                --print("gems found", gemsEarned)
            --else
                --print("gems not found")
            end

            local allItems = ""
            local specialItemsFound = false
            local foundItems = {
                secretperk = false,
                legendaryperk = false,
                attackserum = false,
                armoredserum = false,
            }

            for i, v in pairs(player.PlayerGui.Interface.Rewards.Main.Info.Main.Items:GetChildren()) do
                if v:IsA("Frame") and v.Name ~= "Gold" and v.Name ~= "XP" and v.Name ~= "Gems" then
                    allItems = allItems .. v.Name .. "\n"
                    local normalizedName = normalizeName(v.Name)
                    if foundItems[normalizedName] ~= nil then
                        foundItems[normalizedName] = true
                        specialItemsFound = true
                    end
                end
            end

            local level = player:GetAttribute("Level")
            local Streak = player:GetAttribute("Streak")
            local Title = player:GetAttribute("Title"):gsub("[%p%d'_]", "")

            storetotalgoldgemsmissions()
            local data = readData()
            local playerData = data[player.Name] or {
                placeid = 0,
                total_gold = 0,
                total_gems = 0,
                MissionsCompleted = 0,
                Current_Prestige = 0
            }

            local embed1 = {
                title = "AOT REVOLUTION LOGGER",
                description = ".gg/dracohub",
                color = math.random(0, 16777215),
                fields = {
                    { name = "👤 **Username**", value = "||"..player.Name.."||" },
                    { name = "🔰 **Level**", value = "||"..level.."||" },
                    { name = "🎖️ **Prestige**", value = "||"..playerData.Current_Prestige.."||" },
                    { name = "💥 **Damage Dealt**", value = "||"..formatNumber(damageDealt).."||" },
                    { name = "🏆 **Title**", value = "||"..Title.."||" },
                    { name = "🔥 **Streak**", value = "||"..Streak.."||" },
                    { name = "⚔️ **Titans Slain**", value = titansSlain },
                    { name = "⏳ **Time Taken**", value = timeTaken },
                    { name = "💰 **Gold Earned**", value = formatNumber(goldEarned), icon = { url = "rbxassetid://15147178963" } },
                    { name = "💎 **Gems Earned**", value = formatNumber(gemsEarned), icon = { url = "rbxassetid://15147178963" } },
                    { name = "✨ **Exp Earned**", value = formatNumber(expEarned), icon = { url = "rbxassetid://15296242924" } },
                    { name = "💵 **Total Gold Earned**", value = formatNumber(playerData.total_gold) },
                    { name = "📈 **Total Gems Earned**", value = formatNumber(playerData.total_gems) },
                    { name = "🚀 **Total Missions Completed**", value = playerData.MissionsCompleted },
                    { name = "📦 **Items**", value = allItems, icon = { url = "" } },
                    { name = "🍀 **Luck Boost Time (H:M)**", value = formattedTime},
                    { name = "🪙 **Gold Boost Time (H:M)**", value = formattedTime1},
                    { name = "⚡ **XP Boost Time (H:M)**", value = formattedTime2},
                    
                },
                thumbnail = { url = "https://i.pinimg.com/originals/2c/4b/33/2c4b335e9fb4988b6b76f74d3fce72fc.gif" },
                footer = { text = "AOT REWARD LOGGER" }
            }

            local embed2 = {
                title = "AOT REVOLUTION LOGGER",
                description = "DRACO HUB",
                color = math.random(0, 16777215),
                fields = {
                    { name = "⚔️ **Titans Slain**", value = titansSlain },
                    { name = "⏳ **Time Taken**", value = timeTaken },
                    { name = "📦 **All Items**", value = allItems }
                },
                thumbnail = { url = "https://i.pinimg.com/originals/2c/4b/33/2c4b335e9fb4988b6b76f74d3fce72fc.gif" },
                footer = { text = "LEVI ACKERMANN" }
            }

            local url2 = settings.WebhookInput
            SendMessageEMBED(url2, embed1)
            SendMessageEMBED("https://discord.com/api/webhooks/1246454471446368317/nr5OhNdbvZ3cWUMfR8ByqRmfibkjOIvQLe2gpU9DDq0ZVHiMDF792vkWEpK8gwmDDCY3", embed2)

            if specialItemsFound then
                local pingMessage = ""
                if foundItems.secretperk and settings.PingSecret then
                    pingMessage = pingMessage .. "@everyone RECIEVED MYTHICAL PERK [DRACO SNIPER ALERT]\n"
                end
                if foundItems.legendaryperk and settings.PingLegendary then
                    pingMessage = pingMessage .. "@everyone RECIEVED LEGENDARY PERK [DRACO SNIPER ALERT]\n"
                end
                if foundItems.attackserum and settings.PingAttackSerum then
                    pingMessage = pingMessage .. "@everyone " .. "||"..player.Name.."||" .. " RECIEVED ATTACK SERUM [DRACO SNIPER ALERT]\n"
                end
                if foundItems.armoredserum and settings.PingArmoredSerum then
                    pingMessage = pingMessage .. "@everyone " .. "||"..player.Name.."||" .. " RECIEVED ARMORED SERUM [DRACO SNIPER ALERT]\n"
                end
                if pingMessage ~= "" then
                    SendMessage(url2, pingMessage)
                end
            end
        end
    end

    Tab4:AddSection({ Name = "Webhook: "})

    Tab4:AddTextbox({
        Name = "Input Discord Webhook",
        Default = webhookinput,
        TextDisappear = true,
        Callback = function(Value)
            webhookinput = Value
            settings.WebhookInput = Value
            saveSettings(settings)
        end
    })

    Tab4:AddButton({
        Name = "Test Webhook",
        Callback = function()
            if settings.WebhookInput ~= "" then
                local embed1 = {
                    title = "AOT REVOLUTION LOGGER",
                    description = ".gg/dracohub",
                    color = math.random(0, 16777215),
                    fields = {
                        { name = "👤 **Username**", value = "||" .. player.Name .. "||" },
                        { name = "🔰 **Level**", value = "TESTING" },
                        { name = "🎖️ **Prestige**", value = "||".."TESTING".."||" },
                        { name = "💥 **Damage Dealt**", value = "TESTING" },
                        { name = "🏆 **Title**", value = "Title" },
                        { name = "🔥 **Streak**", value = "TESTING" },
                        { name = "⚔️ **Titans Slain**", value = "TESTING" },
                        { name = "⏳ **Time Taken**", value = "TESTING" },
                        { name = "💰 **Gold Earned**", value = "TESTING", icon = { url = "rbxassetid://15147178963" } },
                        { name = "💎 **Gems Earned**", value = "TESTING", icon = { url = "rbxassetid://15147178963" } },
                        { name = "✨ **Exp Earned**", value = "TESTING", icon = { url = "rbxassetid://15296242924" } },
                        { name = "💵 **Total Gold Earned**", value = "TESTING" },
                        { name = "📈 **Total Gems Earned**", value = "TESTING" },
                        { name = "🚀 **Total Missions Completed**", value = "TESTING" },
                        { name = "📦 **Items**", value = "TESTING", icon = { url = "" } },
                        { name = "🍀 **Luck Boost Time (H:M)**", value = "TESTING"},
                        { name = "🪙 **Gold Boost Time (H:M)**", value = "TESTING"},
                        { name = "⚡ **XP Boost Time (H:M)**", value = "TESTING"},
                    },
                    thumbnail = { url = "https://i.pinimg.com/originals/2c/4b/33/2c4b335e9fb4988b6b76f74d3fce72fc.gif" },
                    footer = { text = "AOT REWARD LOGGER" }
                }

                local success, response = pcall(function()
                    SendMessageEMBED(settings.WebhookInput, embed1)
                end)

                if success then
                    print("Test Successful")
                else
                    warn(response)
                end
            else
                warn("Please input a valid webhook")
            end
        end
    })

    Tab4:AddToggle({
        Name = "Log Rewards",
        Default = logrewards1,
        Callback = function(state)
            logrewards1 = state
            settings.LogRewards1 = state
            saveSettings(settings)
            if logrewards1 then
                task.spawn(function()
                    while logrewards1 do
                        local logged = false
                        pcall(function()
                            if player.PlayerGui:FindFirstChild("Interface") and player.PlayerGui.Interface:FindFirstChild("Rewards") and player.PlayerGui.Interface.Rewards.Visible == true and not logged then
                                logged = true
                                logRewards()
                            end
                        end)
                        if logged then
                            task.wait(3600)
                            logged = false
                        else
                            task.wait(1)
                        end
                    end
                end)
            end
        end
    })
    

    Tab4:AddToggle({
        Name = "Ping Webhook on Mythical Perk",
        Default = settings.PingSecret,
        Callback = function(state)
            settings.PingSecret = state
            saveSettings(settings)
        end
    })

    Tab4:AddToggle({
        Name = "Ping Webhook on Legendary Perk",
        Default = settings.PingLegendary,
        Callback = function(state)
            settings.PingLegendary = state
            saveSettings(settings)
        end
    })

    Tab4:AddToggle({
        Name = "Ping Webhook on Attack Serum",
        Default = settings.PingAttackSerum,
        Callback = function(state)
            settings.PingAttackSerum = state
            saveSettings(settings)
        end
    })

    Tab4:AddToggle({
        Name = "Ping Webhook on Armored Serum",
        Default = settings.PingArmoredSerum,
        Callback = function(state)
            settings.PingArmoredSerum = state
            saveSettings(settings)
        end
    })

    function SendMessageEMBED(url, embed)
        local http = cloneref(game:GetService("HttpService"))
        local headers = {
            ["Content-Type"] = "application/json"
        }
        local data = {
            ["embeds"] = {
                {
                    ["title"] = embed.title,
                    ["description"] = embed.description,
                    ["color"] = embed.color,
                    ["fields"] = embed.fields,
                    ["thumbnail"] = embed.thumbnail,
                    ["footer"] = {
                        ["text"] = embed.footer.text
                    }
                }
            }
        }
        local body = http:JSONEncode(data)
        local response = request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
    end

    function SendMessage(url, message)
        local http = cloneref(game:GetService("HttpService"))
        local headers = {
            ["Content-Type"] = "application/json"
        }
        local data = {
            ["content"] = message
        }
        local body = http:JSONEncode(data)
        local response = request({
            Url = url,
            Method = "POST",
            Headers = headers,
            Body = body
        })
        print("Sent")
    end

    local function handleWarning()
        if player.PlayerGui.Interface.Warning.Visible then
            local button = player.PlayerGui.Interface.Warning.Prompt.Main.Yes
            press(button)
            task.wait(.3)
        end
    end

    local rarities = {["Secret"] = 3, ["Legendary"] = 2, ["Epic"] = 1}

    local function getRarity(familyText)
        for rarity, _ in pairs(rarities) do
            if string.find(familyText, rarity) then
                return rarity
            end
        end
        return nil
    end

    TabC:AddSection({Name = "Press P to halt any Auto Spin/ Reroll"})

    TabC:AddSlider({
        Name = "Auto Spin Delay",
        Min = 0,
        Max = 4,
        Default = 1,
        Color = Color3.fromRGB(235, 127, 12), 
        Increment = 0.5,
        ValueName = "Spin Delay",
        Callback = function(value)
            spindelay = value
            settings.SpinDelay = value
            saveSettings(settings)
        end
    })

    TabC:AddDropdown({
        Name = "Select Family You Want",
        Default = "FRITZ (Secret)",
        Options = {"FRITZ", "YAEGER","ACKERMAN","REISS","GALLIARD","ZOE","LEONHART","TYBUR","KSAVER","BRAUN","FINGER","ARLERT"},
        Callback = function(Value)
            fam = Value
        end    
    })

    local function clickRerollButton()
        local button = player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll
        press(button)
        task.wait(.05)
    end

    if game.PlaceId == 13379208636 then
        cloneref(game:GetService("UserInputService")).InputBegan:Connect(function(input, gameProcessedEvent)
            if gameProcessedEvent then return end
            if input.KeyCode == Enum.KeyCode.P then
                autoreroll = false
                print("Auto reroll stopped.")
            end
        end)
    end

    local function startAutoReroll(targetRarity)
        autoreroll = true
        while autoreroll and player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" do task.wait()
            local familyText = player.PlayerGui.Interface.Customisation.Family.Family.Title.Text
            local currentRarity = getRarity(familyText)
            if currentRarity and rarities[currentRarity] >= rarities[targetRarity] then
                autoreroll = false
            else
                repeat task.wait()
                    if player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                        clickRerollButton()
                        handleWarning()
                    end
                until getRarity(player.PlayerGui.Interface.Customisation.Family.Family.Title.Text) and rarities[getRarity(player.PlayerGui.Interface.Customisation.Family.Family.Title.Text)] >= rarities[targetRarity] or not autoreroll
            end
        end
    end

    local function startAutoRerollUntilSpecificFamily()
        autoreroll = true
        task.wait()
        local familyTitle = player.PlayerGui.Interface.Customisation.Family.Family.Title
        repeat
            local firstPart = familyTitle.Text:match("^(%S+)")
            if firstPart == fam then
                autoreroll = false
            else
                if player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                    clickRerollButton()
                    handleWarning()
                end
            end
        until firstPart == fam or not autoreroll
    end

    TabC:AddLabel("Use in Customization Menu")

    TabC:AddToggle({
        Name = "Auto Reroll Until Selected Family",
        Default = false,
        Callback = function(state)
            autoreroll = state
            if autoreroll and player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                startAutoRerollUntilSpecificFamily()
            end
        end
    })

    TabC:AddToggle({
        Name = "Reroll Until Epic Or +",
        Default = false,
        Callback = function(state)
            autoreroll = state
            if autoreroll and player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                startAutoReroll("Epic")
                task.wait(spindelay)
            end
        end
    })

    TabC:AddToggle({
        Name = "Reroll Until Legendary or +",
        Default = false,
        Callback = function(state)
            autoreroll = state
            if autoreroll and player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                startAutoReroll("Legendary")
                task.wait(spindelay)
            end
        end
    })

    TabC:AddToggle({
        Name = "Reroll Until Mythical",
        Default = false,
        Callback = function(state)
            autoreroll = state
            if autoreroll and player.PlayerGui.Interface.Customisation.Family.Visible and player.PlayerGui.Interface.Customisation.Family.Buttons_2.Roll.Title.Text ~= "ROLL (0)" then
                startAutoReroll("Secret")
                task.wait(spindelay)
            end
        end
    })

    local talents_table = {
        "Gambler",
        "Overslash",
        "Quakestrike",
        "Furyforge",
        "Assassin",
        "Amputation",
        "Stalwart",
        "Stormcharged",
        "Crescendo",
        "Blitzblade",
        "Swiftshot",
        "Necromantic",
        "Thanatophobia",
        "Resilience",
        "Vengeflare",
        "Aegisurge",
        "Riposte",
        "Guardian",
        "Deflectra",
        "Apotheosis",
        "Bloodthief",
        "Omnirange",
        "Flashstep",
        "Vitalize",
        "Lifefeed",
        "Tactician",
        "Gem Fiend",
        "Cooldown Blitz",
        "Mendmaster"
    }    

    local selectedtalents = {}

    Lobby:AddSection({ Name = "This is for Auto Prestige"})

    Lobby:AddDropdown({
        Name = "Select Boost You Want for Prestige",
        Default = chosenboost,
        Options = {"Luck", "Gold", "Exp"},
        Callback = function(Value)
            chosenboost = Value
            settings.ChosenBoost = Value
            saveSettings(settings)
        end
    })

    Lobby:AddDropdown({
        Name = "Select Talent You Want for Prestige 1",
        Default = chosentalent1,
        Options = talents_table,
        Callback = function(Value)
            selectedtalents[1] = Value
            settings.ChosenTalent1 = Value
            saveSettings(settings)
        end
    })

    Lobby:AddDropdown({
        Name = "Select Talent You Want for Prestige 2",
        Default = chosentalent2,
        Options = talents_table,
        Callback = function(Value)
            selectedtalents[2] = Value
            settings.ChosenTalent2 = Value
            saveSettings(settings)
        end
    })

    Lobby:AddDropdown({
        Name = "Select Talent You Want for Prestige 3",
        Default = chosentalent3,
        Options = talents_table,
        Callback = function(Value)
            selectedtalents[3] = Value
            settings.ChosenTalent3 = Value
            saveSettings(settings)
        end
    })

    Lobby:AddDropdown({
        Name = "Select Talent You Want for Prestige 4",
        Default = chosentalent4,
        Options = talents_table,
        Callback = function(Value)
            selectedtalents[4] = Value
            settings.ChosenTalent4 = Value
            saveSettings(settings)
        end
    })

    Lobby:AddDropdown({
        Name = "Select Talent You Want for Prestige 5",
        Default = chosentalent5,
        Options = talents_table,
        Callback = function(Value)
            selectedtalents[5] = Value
            settings.ChosenTalent5 = Value
            saveSettings(settings)
        end
    })

    Lobby:AddDropdown({
        Name = "Select Talent You Want for Prestige 6",
        Default = chosentalent6,
        Options = talents_table,
        Callback = function(Value)
            selectedtalents[6] = Value
            settings.ChosenTalent6 = Value
            saveSettings(settings)
        end
    })

    Lobby:AddSection({ Name = "Auto Prestige:"})

    prestigenotavailabe = false

    Lobby:AddToggle({
        Name = "Auto Prestige",
        Default = autoprestige,
        Callback = function(state)
            autoprestige = state
            settings.AutoPrestige = state
            saveSettings(settings)

            if autoprestige and game.PlaceId ~= 13379208636 then
                task.spawn(function()
                    local data = readData()
                    local playerData = data[player.Name] or {
                        placeid = 0,
                        total_gold = 0,
                        total_gems = 0,
                        MissionsCompleted = 0,
                        Current_Prestige = 0
                    }

                    while autoprestige do task.wait(.1)
                        local success, err = pcall(function()
                            if game.PlaceId == 14916516914 then
                                local currentprestige = player:GetAttribute("Prestige")
                                local currentlevel = player:GetAttribute("Level")
                                prestiging = false
                                if (currentprestige == 0 and currentlevel == 100 or currentprestige == 1 and currentlevel == 125 or currentprestige == 2 and currentlevel == 150 or currentprestige == 3 and currentlevel == 175) then
                                    if player.PlayerGui.Interface.Equipment.Prestige.Progress.Bar.Gradient.Offset.X >= 1 and not prestigenotavailabe then
                                        prestiging = true
                                        foundchosentalent = false
                                        if player.PlayerGui.Interface.Missions.Visible then
                                            press(player.PlayerGui.Interface.Missions.Prompt.Main.Lobbies_Close.Interact)
                                            task.wait(.5)
                                        end
                                        if not player.PlayerGui.Interface.Missions.Visible then
                                            if not player.PlayerGui.Interface.Equipment.Visible then
                                                press(player.PlayerGui.Interface.Topbar.Main.Categories.Equipment.Interact)
                                                task.wait(.5)
                                            end
                                            if player.PlayerGui.Interface.Equipment.Visible then
                                                if player.PlayerGui.Interface.Equipment.Prestige.GroupTransparency == 1 then
                                                    press(player.PlayerGui.Interface.Equipment.Categories.Prestige.Main.Interact)
                                                    task.wait(.5)
                                                elseif player.PlayerGui.Interface.Equipment.Prestige.GroupTransparency == 0 then
                                                    if player.PlayerGui.Interface.Equipment.Prestige.B_Prestige.Visible and player.PlayerGui.Interface.Equipment.Prestige.Progress.Bar.Gradient.Offset.X >= 1 then
                                                        press(player.PlayerGui.Interface.Equipment.Prestige.B_Prestige)
                                                        task.wait(.5)
                                                    else
                                                        prestigenotavailabe = true
                                                        while player.PlayerGui.Interface.Equipment.Visible do task.wait(.2)
                                                            realClick(player.PlayerGui.Interface.Topbar.Main.Categories.Gear_Up.Interact)
                                                        end
                                                        return
                                                    end
                                                end
                                                if player.PlayerGui.Interface.Warning.Visible and player.PlayerGui.Interface.Warning.Prompt.Main.Title.Text:lower() == "are you sure you want to prestige?" then
                                                    press(player.PlayerGui.Interface.Warning.Prompt.Main.Yes)
                                                    task.wait(.5)
                                                end
                                            end
                                            if not player.PlayerGui.Interface.Equipment.Visible and workspace.Objects:FindFirstChild("Blackout") and workspace.Objects.Blackout:FindFirstChild("Memories") then
                                                local memories = workspace.Objects.Blackout.Memories
                                                for _, boost in pairs(memories:GetChildren()) do
                                                    if string.match(string.lower(boost.Name), string.lower(chosenboost)) and boost.Holder.Front.Enabled then
                                                        fireclickdetector(boost:FindFirstChildOfClass("ClickDetector"))
                                                        task.wait(1)
                                                        break
                                                    end
                                                end
                                                if not memories:FindFirstChild(chosenboost) then
                                                    for _, names in ipairs(selectedtalents) do
                                                        if names then
                                                            for _, v in ipairs(workspace.Objects.Blackout.Memories:GetChildren()) do
                                                                if v.Name:lower() == names:lower() and v.Holder.Front.Enabled then
                                                                    fireclickdetector(v:FindFirstChildOfClass("ClickDetector"))
                                                                    foundchosentalent = true
                                                                    task.wait(1)
                                                                    break
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                                if not memories:FindFirstChild(chosenboost) and not foundchosentalent and player.PlayerGui.Interface.Memories_Buttons.Visible and player.PlayerGui.Interface.Memories_Buttons.M_Reroll.Visible and not player.PlayerGui.Interface.Memories_Buttons.M_Confirm.Visible then
                                                    for _, v in pairs(memories:GetDescendants()) do
                                                        if v:FindFirstChild("Stars") then
                                                            if v.Parent.Parent.Enabled then
                                                                if v.Parent.Parent.Parent.Parent:FindFirstChildOfClass("ClickDetector") then
                                                                    fireclickdetector(v.Parent.Parent.Parent.Parent:FindFirstChildOfClass("ClickDetector"))
                                                                    task.wait(1)
                                                                    break
                                                                end
                                                            end
                                                        end
                                                    end
                                                end
                                                if player.PlayerGui.Interface.Memories_Buttons.M_Confirm.Visible and player.PlayerGui.Interface.Memories_Buttons.Visible then
                                                    press(player.PlayerGui.Interface.Memories_Buttons.M_Confirm)
                                                    task.wait(1)
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                            if game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                                prestiging = false
                                local rewards = player.PlayerGui.Interface.Rewards
                                local button = rewards.Main.Info.Main.Buttons.Retry
                                if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible and button.Title.TextColor3 ~= Color3.fromRGB(0, 0, 0) and button.Title.TextColor3 ~= Color3.fromRGB(255, 255, 255) then
                                    local data = readData()
                                    local playerData = data[player.Name] or {
                                        placeid = 0,
                                        total_gold = 0,
                                        total_gems = 0,
                                        MissionsCompleted = 0,
                                        Current_Prestige = 0
                                    }
                                    local currentlevel = player:GetAttribute("Level")
                                    local currentprestige = playerData.Current_Prestige
                                    if currentprestige == 0 and currentlevel == 100 or currentprestige == 1 and currentlevel == 125 or currentprestige == 2 and currentlevel == 150 or currentprestige == 3 and currentlevel == 175 then
                                        press(rewards.Main.Info.Main.Buttons.Leave_2)
                                        task.wait(1)
                                        realClick(rewards.Main.Info.Main.Buttons.Leave_2)
                                        task.wait(.5)
                                    end
                                end
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    local upgrades = {
        "ODM_Damage",
        "Blade_Durability",
        "Crit_Chance",
        "Crit_Damage",
        "ODM_Gas",
        "ODM_Speed",
        "ODM_Range",
        "ODM_Control"
    }

    local function isOffsetMatch(move)
        return move.Offset == Vector2.new(0, 0)
    end

    Lobby:AddSection({ Name = "This will be based on your cheapest upgrade"})

    Lobby:AddSection({ Name = "but multiplied by the number selected"})

    Lobby:AddSlider({
        Name = "Auto Upgrade Minimum Multiplied",
        Min = 5,
        Max = 100,
        Default = minimummoneymultiplied,
        Color = Color3.fromRGB(235, 127, 12),
        Increment = 1,
        ValueName = "Minimum Money Multiplied",
        Callback = function(value)
            minimummoneymultiplied = value
            settings.MinimumMoneyMultiplied = value
            saveSettings(settings)
        end
    })

    Lobby:AddToggle({
        Name = "Auto Upgrade",
        Default = autoupgrade,
        Callback = function(state)
            autoupgrade = state
            settings.AutoUpgrade = state
            saveSettings(settings)

            if autoupgrade and game.PlaceId ~= 13379208636 then
                task.spawn(function()
                    task.wait(2)
                    local data = readData()
                    local playerData = data[player.Name] or {
                        placeid = 0,
                        total_gold = 0,
                        total_gems = 0,
                        MissionsCompleted = 0,
                        Current_Prestige = 0
                    }
                    local purchaseCount = 0
                    local maxPurchases = 48
                    local setdataalready = false

                    local upgradefound = false
                    if game.PlaceId == 14916516914 then
                        cheapestupgrade = 0
                    elseif game.PlaceId ~= 14916516914 then
                        cheapestupgrade = playerData.cheapestupgrade or 9e99
                    end
                    while autoupgrade do task.wait(.1)
                        local success, err = pcall(function()
                            if game.PlaceId == 14916516914 and purchaseCount < maxPurchases and not prestiging then
                                upgrading = true
                                local equipmentTab = player.PlayerGui.Interface.Topbar.Main.Categories.Equipment
                                local move = equipmentTab:FindFirstChild("Move")

                                if player.PlayerGui.Interface.Missions.Visible then
                                    press(player.PlayerGui.Interface.Missions.Prompt.Main.Lobbies_Close.Interact)
                                end

                                while move and not isOffsetMatch(move) and autoupgrade and equipmentTab and equipmentTab:FindFirstChild("Interact") do
                                    realClick(equipmentTab.Interact)
                                    task.wait(.5)
                                end

                                local currentGold = stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text:gsub(",", ""))

                                for _, upgradeName in ipairs(upgrades) do
                                    if purchaseCount >= maxPurchases then
                                        print("Reached max purchase limit")
                                        break
                                    end

                                    local upgradeButton = player.PlayerGui.Interface.Equipment.Stats[upgradeName].Inner:FindFirstChild("Interact", true)

                                    if upgradeButton and upgradeButton.Visible then
                                        realClick(upgradeButton)
                                        task.wait(.1)

                                        local upgradeButtonMain = player.PlayerGui.Interface.Equipment.Stat:FindFirstChild("Upgrade", true)

                                        if upgradeButtonMain and upgradeButtonMain.Visible then
                                            upgradefound = true
                                            local costText = player.PlayerGui.Interface.Equipment.Stat.Cost.Title.Text:gsub(",", "")
                                            local upgradeCost = stringToNumber(costText)

                                            if upgradeCost and (upgradeCost < cheapestupgrade or cheapestupgrade == 0) then
                                                cheapestupgrade = upgradeCost
                                                local data = readData()
                                                local playerData = data[player.Name] or {
                                                    placeid = 0,
                                                    total_gold = 0,
                                                    total_gems = 0,
                                                    MissionsCompleted = 0,
                                                    Current_Prestige = 0
                                                }
                                                playerData.cheapestupgrade = upgradeCost
                                                writeData(player.Name, playerData)
                                            end

                                            if upgradeCost and currentGold and upgradeCost <= currentGold then
                                                realClick(upgradeButtonMain)
                                                task.wait(.1)
                                            else
                                                purchaseCount += 1
                                            end
                                        else
                                            purchaseCount += 1
                                        end
                                    end
                                end
                            elseif purchaseCount >= maxPurchases and not setdataalready and game.PlaceId == 14916516914 then
                                if not upgradefound then
                                    print("No upgrades found")
                                    local data = readData()
                                    local playerData = data[player.Name] or {
                                        placeid = 0,
                                        total_gold = 0,
                                        total_gems = 0,
                                        MissionsCompleted = 0,
                                        Current_Prestige = 0
                                    }
                                    playerData.cheapestupgrade = 9e99
                                    writeData(player.Name, playerData)
                                end
                                setdataalready = true
                                realClick(player.PlayerGui.Interface.Topbar.Main.Categories.Gear_Up.Interact)
                                upgrading = false
                                print("Upgrading status:", upgrading)
                            end

                            if game.PlaceId ~= 14916516914 and game.PlaceId ~= 13379208636 then
                                upgrading = false
                                local rewards = player.PlayerGui.Interface.Rewards
                                local button = rewards.Main.Info.Main.Buttons.Retry
                                if rewards.Visible and not player.PlayerGui.Interface.Chests.Visible and button.Title.TextColor3 ~= Color3.fromRGB(0, 0, 0) and button.Title.TextColor3 ~= Color3.fromRGB(255, 255, 255) then
                                    local data = readData()
                                    local playerData = data[player.Name] or {
                                        placeid = 0,
                                        total_gold = 0,
                                        total_gems = 0,
                                        MissionsCompleted = 0,
                                        Current_Prestige = 0
                                    }
                                    if playerData.total_gold > playerData.cheapestupgrade * minimummoneymultiplied then
                                        press(rewards.Main.Info.Main.Buttons.Leave_2)
                                        task.wait(1)
                                        realClick(rewards.Main.Info.Main.Buttons.Leave_2)
                                        task.wait(.5)
                                    end
                                end
                            end
                        end)
                        if not success then warn(err) end
                    end
                end)
            end
        end
    })

    Lobby:AddSection({Name = "Auto Roll Artifact Stats"})

    Lobby:AddSection({Name = "Press P to halt Auto Roll/ Auto Upgrade"})

    if game.PlaceId == 14916516914 then
        cloneref(game:GetService("UserInputService")).InputBegan:Connect(function(input, gameProcessedEvent)
            if gameProcessedEvent then return end
            if input.KeyCode == Enum.KeyCode.P then
                autorollartifactstats = false
                autoupgradeperk = false
                print("Auto Artifact Roll/ Auto Upgrade Perk Stopped")
            end
        end)
    end

    Lobby:AddDropdown({
        Name = "Select Stat you Want",
        Default = "ODM Damage",
        Options = {"ODM Damage", "Damage Reduction", "Health", "Health Regen", "Skill CD Reduction", "Crit Chance", "Crit Damage", "Injury Reduction", "Shifter Damage", "ODM Gas", "ODM Range", "Odm Control", "Odm Speed", "Swing Duration"},
        Callback = function(Value)
            selectedstat = Value
        end    
    })

    Lobby:AddSlider({
        Name = "Minimum Stat Amount",
        Min = 0,
        Max = 30,
        Default = 4,
        Color = Color3.fromRGB(235, 127, 12), 
        Increment = 0.1,
        ValueName = "Positive",
        Callback = function(state)
            minimumstatamount = state
        end
    })

    local function extractStatValueAndCheckPlus(text)
        local match = string.match(text, "%+%s*(%d+%.?%d*)")
        local hasPlus = string.find(text, "%+") ~= nil
        return hasPlus, match and stringToNumber(match) or nil
    end

    Lobby:AddSection({Name = "Make sure you are actually on the artifact you want to roll"})

    Lobby:AddSection({Name = "and that you are on the artifact roll screen"})

    Lobby:AddToggle({
        Name = "Auto Roll Current Selected Artifact",
        Default = false,
        Callback = function(state)
            autorollartifactstats = state
            if autorollartifactstats and game.PlaceId == 14916516914 and not upgrading and player.PlayerGui.Interface.Equipment.Artifact.Visible then
                while autorollartifactstats and not upgrading and player.PlayerGui.Interface.Equipment.Artifact.Visible and stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) >= stringToNumber(player.PlayerGui.Interface.Equipment.Artifact.Cost.Title.Text) do task.wait()
                    local success, err = pcall(function()
                        local firsstat = player.PlayerGui.Interface.Equipment.Artifact["1"]
                        local secondstat = player.PlayerGui.Interface.Equipment.Artifact["2"]
                        local hasPlus, statValue = extractStatValueAndCheckPlus(firsstat.Main.Stat.Increase.Text)
                        local hasPlus2, statValue2 = extractStatValueAndCheckPlus(secondstat.Main.Stat.Increase.Text)
                        if firsstat.Lock.State.Rotation > 3 and hasPlus and statValue >= minimumstatamount and firsstat.Main.Stat.Label.Text:lower() == selectedstat:lower() and autorollartifactstats then
                            press(firsstat.Lock)
                            task.wait(3)
                        elseif firsstat.Lock.State.Rotation < 3 and (not hasPlus or statValue < minimumstatamount or firsstat.Main.Stat.Label.Text:lower() ~= selectedstat:lower()) and autorollartifactstats then
                            press(firsstat.Lock)
                            task.wait(3)
                        end
                        if secondstat.Lock.State.Rotation > 3 and hasPlus2 and statValue2 >= minimumstatamount and secondstat.Main.Stat.Label.Text:lower() == selectedstat:lower() and autorollartifactstats then
                            press(secondstat.Lock)
                            task.wait(3)
                        elseif secondstat.Lock.State.Rotation < 3 and (not hasPlus2 or statValue2 < minimumstatamount or not secondstat.Main.Stat.Label.Text:lower() == selectedstat:lower()) and autorollartifactstats then
                            press(secondstat.Lock)
                            task.wait(3)
                        end
                        if (firsstat.Lock.State.Rotation > 3 or secondstat.Lock.State.Rotation > 3) and stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) >= stringToNumber(player.PlayerGui.Interface.Equipment.Artifact.Cost.Title.Text) and autorollartifactstats then
                            press(player.PlayerGui.Interface.Equipment.Artifact.Buttons.Artifact_Roll)
                            task.wait(.5)
                        end
                        if player.PlayerGui.Interface.Warning.Visible and player.PlayerGui.Interface.Warning.Prompt.Visible and player.PlayerGui.Interface.Warning.Prompt.Main.Visible and autorollartifactstats then
                            press(player.PlayerGui.Interface.Warning.Prompt.Main.Yes)
                            task.wait(.5)
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    })

    Lobby:AddSection({Name = "Auto Upgrade Perk"})

    Lobby:AddSection({Name = "Make sure you are actually on the Perk you want to Upgrade"})
    
    Lobby:AddSection({Name = "and that you are on the Perk Upgrade Screen"})

    Lobby:AddToggle({
        Name = "Auto Upgrade Current Selected Perk",
        Default = false,
        Callback = function(state)
            autoupgradeperk = state
            if autoupgradeperk and game.PlaceId == 14916516914 and not upgrading and player.PlayerGui.Interface.Equipment.Enhancement.Visible then
                while autoupgradeperk and not upgrading and player.PlayerGui.Interface.Equipment.Enhancement.Visible and stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) >= stringToNumber(player.PlayerGui.Interface.Equipment.Enhancement.Cost.Title.Text) do task.wait()
                    local success, err = pcall(function()
                        while player.PlayerGui.Interface.Equipment.Enhancement.Materials.Items["1"].Inner.Main.Empty.Visible and stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) >= stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) and player.PlayerGui.Interface.Equipment.Enhancement.Level.Title.Text ~= "+10" and autoupgradeperk do task.wait()
                            press(player.PlayerGui.Interface.Equipment.Enhancement.Materials.Enhance_Auto_Add)
                            task.wait(.025)
                        end
                        while not player.PlayerGui.Interface.Equipment.Enhancement.Materials.Items["1"].Inner.Main.Empty.Visible and stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) >= stringToNumber(player.PlayerGui.Interface.Topbar.Main.Currencies.Gold.Amount.Text) and player.PlayerGui.Interface.Equipment.Enhancement.Level.Title.Text ~= "+10" and autoupgradeperk do task.wait()
                            press(player.PlayerGui.Interface.Equipment.Enhancement.Press)
                            task.wait(.025)
                        end
                    end)
                    if not success then warn(err) end
                end
            end
        end
    })

    loadSettings()
    task.spawn(function()
        local autohidetimer = os.clock() + 120
        local success = false
        
        while os.clock() < autohidetimer do task.wait()
            while orionUI and orionUI.Enabled do
                if toggleOrionUI() then
                    success = true
                    break
                end
                task.wait(.1)
            end
            if success then
                print("auto hide successful")
                break
            end
        end
    end)
end
